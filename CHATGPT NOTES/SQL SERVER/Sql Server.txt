Sql Server
===========
-----------------------------------------------------------------------------------------------------------------------------------------------------------
# COMMANDS FOR CREATING AND INSERTING DATA IN TO DATABASE 
Summary:
1. CREATE DB [DB_NAME];
2. USE [DB_NAME]
3. CREATE TABLE [TABLE_NAME]( /* add column names with their datatype and constraints */ );
4. INSERT INTO [TABLE_NAME] ([COLUMN NAMES]) VALUES (ROW1 DATA), (ROW2 DATA),...........,(nth ROW DATA);
5. SELECT * FROM [TABLE_NAME];
-----------------------------------------------------------------------------------------------------------------------------------------------------------
1.CREATE DB 
================
CREATE DATABASE HarshalTestDb;

2. USE DB
==============
USE HarshalTestDb;

3. CREATE TABLE 
===================
CREATE TABLE Employees (
	EmployeeId INT PRIMARY KEY IDENTITY(1,1),
	FirstName NVARCHAR(30) NOT NULL ,
	LastName NVARCHAR(30) NOT NULL ,
	DOB DATETIME2 NOT NULL,
	Age AS (
		DATEDIFF(YEAR, DOB , GETDATE()) -
			CASE
				WHEN MONTH(DOB) > MONTH(GETDATE())
				OR (MONTH(DOB) = MONTH(GETDATE()) AND DAY(DOB) > DAY(GETDATE()))
				THEN 1
				ELSE 0 
			END
	),
	Salary DECIMAL(10,2),CHECK(Salary >= 0),
	ProfilePic VARBINARY(MAX),
	Email NVARCHAR(100) UNIQUE,
	PhoneNumber NVARCHAR(10) UNIQUE,
	HireDate DATE DEFAULT GETDATE(),
	IsActive BIT DEFAULT 1
);

4. INSERT VALUE IN TO TABLE
=============================
INSERT INTO Employees(FirstName, LastName,  DOB, Salary, Email, PhoneNumber)
VALUES ('Harshal', 'Patil', '1995-12-10', 28000, 'harshalsinghrajput@stspl.com','1234567890');

5. GET VALUES FROM TABLE 
==========================
SELECT * FROM Employees;

6. Apply filters 
====================
6.1 use column names to get selective data 
SELECT FirstName, age FROM Employees ;

6.2. use where clause
=========================
-------------------------------------------------------------------------------------------------------------------------------------------------------
B2B:Relational operators 
1. precedence (>,>=,<,<=, Not equal (!= or <>),=)
2. logical operator (NOT, AND , OR)
-------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM Employees WHERE SALARY<2000;
SELECT FIRSTNAME, LASTNAME ,Salary FROM Employees WHERE SALARY >= 28000 AND SALARY <30000;

6.3 calculated column: 
------------------------
SELECT 
FirstName, Age, 
COALESCE(Salary, 0) * 12 AS YearlySalary -- here we used COALESCE to check no nullvalue should be come else we replace null salaries with 0
FROM Employees;




========================================================================================================================================================
sql model contraints in ef core 
---------------------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

public class Employee
{
    [Key] // Marks as Primary Key
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Auto-increment (IDENTITY)
    public int EmployeeID { get; set; }

    [Required] // NOT NULL constraint
    [MaxLength(50)] // NVARCHAR(50)
    public string FirstName { get; set; }

    [Required]
    [MaxLength(50)]
    public string LastName { get; set; }

    [Required]
    public DateTime DOB { get; set; } // Stores Date of Birth

    [NotMapped] // This column won't be stored in the database (calculated property)
    public int Age => CalculateAge(DOB); 

    [Required]
    [Range(0, double.MaxValue)] // CHECK constraint (Salary >= 0)
    public decimal Salary { get; set; }

    public byte[] ProfilePic { get; set; } // Stores Image in Binary Format

    [Required]
    [EmailAddress] // Enforces email format
    [MaxLength(100)]
    public string Email { get; set; }

    [Required]
    [Phone] // Ensures a valid phone format
    [MaxLength(15)]
    public string PhoneNumber { get; set; }

    [Required]
    public DateTime HireDate { get; set; } = DateTime.Now; // Default Value

    [Required]
    public bool IsActive { get; set; } = true; // Default to Active

    // **Method to Calculate Age**
    private int CalculateAge(DateTime dob)
    {
        var today = DateTime.Today;
        int age = today.Year - dob.Year;
        if (dob.Date > today.AddYears(-age)) // Adjust if birthday hasn't occurred yet
        {
            age--;
        }
        return age;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================================
							# 2. FOREIGN KEY # 
1. ALTER TABLE [TBL1_NAME]
   ADD [FK_NAME] [DATATYPE] CONSTRAIT [FK_TBL1_NAME_TBL2_NAME] FOREIGN KEY REFERENCES TBL2_NAME(FK_NAME);

2. UPDATE [TBL_NAME]
   SET FK_NAME = ""
   WHERE [CONDITION];
-- AT A TIME ONLY ONE TABLE WILL BE UPDATE  but You can update MULTIPLE ROWS AND COLUMNS SIMULTANEOUSLY in same table . 
-- if you want to update MULTIPLE TABLES then you will require a sapreate update for each table

3. EXEC sp_rename 'OLDER_NAME','NEW_NAME';
=======================================================================================================================================================

------- Update -----------------------------------

UPDATE Emp 
set Salary = 1000000
where EmployeeId = 1;

-- or do arithmetic

UPDATE Emp 
set Salary = Salary + 0.4 * Salary
where EmployeeId = 1;
-----------------------------------------------------

1. DEPT - create table , insert data and check 

CREATE TABLE DEPT (
	DeptNo INT PRIMARY KEY IDENTITY(1,1),
	DeptName VARCHAR(20) NOT NULL UNIQUE 
);

-- way to add multiple rows 
INSERT INTO DEPT(DeptName)
values 
('HR'),
('Finance'),
('IT'),
('Marketing'),
('Operations');

SELECT * FROM DEPT;

2. Establish relation ship  

ALTER TABLE Employees
ADD DeptNo INT CONSTRAINT FK_DEPT_EMPLOYEES FOREIGN KEY REFERENCES DEPT(DeptNo);

UPDATE Employees
SET DeptNo = 3 
WHERE EmployeeId = 1;

select * from employees;

============ Rename table =======================
EXEC sp_rename 'Employees','Emp'; 

select * from emp;

================================================= Insert data in to renamed table for data analysis ================================================
--------------------------------------------------------- Data for dept table ----------------------------------------------------------------------------
INSERT INTO DEPT(DeptName)
values 
('HR'),
('Finance'),
('IT'),
('Marketing'),
('Operations');

--------------------------------------------------------- data for emp table -------------------------------------------------------------------------------

INSERT INTO Emp (FirstName, LastName, DOB, Salary, ProfilePic, Email, PhoneNumber, HireDate, IsActive, DeptNo)
VALUES
('John', 'Doe', '1990-05-15', 60000.00, NULL, 'john.doe@example.com', '9876543210', '2023-06-01', 1, 1),
('Jane', 'Smith', '1985-12-22', 75000.50, NULL, 'jane.smith@example.com', '9123456789', '2022-09-15', 1, 2),
('Michael', 'Johnson', '1992-08-10', 58000.75, NULL, 'michael.johnson@example.com', '9988776655', '2021-11-20', 1, 3),
('Emily', 'Davis', '1988-03-25', 82000.00, NULL, 'emily.davis@example.com', '9871234567', '2020-04-10', 1, 1),
('Robert', 'Brown', '1995-07-05', 45000.25, NULL, 'robert.brown@example.com', '9654321876', '2023-12-01', 1, 4),
('Sophia', 'Wilson', '1997-09-30', 55000.00, NULL, 'sophia.wilson@example.com', '9543218765', '2023-01-15', 1, 2),
('David', 'Anderson', '1983-11-18', 90000.00, NULL, 'david.anderson@example.com', '9456781234', '2019-06-20', 1, 3),
('Olivia', 'Martinez', '1994-04-02', 48000.50, NULL, 'olivia.martinez@example.com', '9876541200', '2023-07-05', 1, 4),
('James', 'Taylor', '1996-06-12', 51000.00, NULL, 'james.taylor@example.com', '9234567890', '2022-05-10', 1, 1),
('Isabella', 'Harris', '1993-02-28', 73000.75, NULL, 'isabella.harris@example.com', '9345678901', '2021-08-25', 1, 2),
('Ethan', 'Clark', '1987-09-14', 82000.00, NULL, 'ethan.clark@example.com', '9876543222', '2020-02-18', 1, 3),
('Mia', 'Rodriguez', '1991-07-08', 56000.50, NULL, 'mia.rodriguez@example.com', '9123456777', '2023-06-20', 1, 4),
('Liam', 'Walker', '1989-11-05', 67000.25, NULL, 'liam.walker@example.com', '9988776633', '2022-09-10', 1, 1),
('Charlotte', 'Lee', '1998-03-20', 47000.00, NULL, 'charlotte.lee@example.com', '9654321888', '2023-01-05', 1, 2),
('Benjamin', 'Hall', '1990-05-25', 59000.75, NULL, 'benjamin.hall@example.com', '9543218799', '2021-10-15', 1, 3),
('Aarav', 'Sharma', '1991-06-15', 62000.00, NULL, 'aarav.sharma@example.com', '9876543201', '2023-06-05', 1, 5),
('Neha', 'Verma', '1986-10-12', 78000.50, NULL, 'neha.verma@example.com', '9123456798', '2022-08-12', 1, 5),
('Rohan', 'Kapoor', '1993-04-22', 59000.75, NULL, 'rohan.kapoor@example.com', '9988776643', '2021-10-25', 1, 5),
('Simran', 'Singh', '1989-02-18', 84000.00, NULL, 'simran.singh@example.com', '9871234556', '2020-03-15', 1, 5),
('Vikram', 'Malhotra', '1997-07-30', 47000.25, NULL, 'vikram.malhotra@example.com', '9654321887', '2023-11-18', 1, 5);
============================================================================================================================================================

--- UPDATE TWO VALUES AT SAME TIME 
UPDATE Emp
SET Salary = 28000, LastName = 'Patil'
where EmployeeId = 3;


================================================================= 3. ORDER BY =============================================================================
-- ORDER BY (BY ONE COLUMN OR MULTIPLE COLUMNS)

SELECT DeptNo, FirstName +' '+ LastName AS eName, Age , Salary 
FROM EMP
ORDER BY DeptNo;

SELECT DeptNo, FirstName +' '+ LastName AS eName, Age , Salary 
FROM EMP
ORDER BY DeptNo DESC ;

SELECT DeptNo, FirstName +' '+ LastName AS eName, Age , Salary 
FROM EMP
ORDER BY DeptNo , AGE;

SELECT DeptNo, FirstName +' '+ LastName AS eName, Age , Salary 
FROM EMP
ORDER BY DeptNo DESC , AGE ;

SELECT DeptNo, FirstName +' '+ LastName AS eName, Age , Salary 
FROM EMP
ORDER BY DeptNo DESC , AGE DESC;

-- ORDER BY WITH WHERE CLAUSE

SELECT * FROM Emp
WHERE DeptNo = 5
ORDER BY firstName desc;

-- calculate yearly salary (No need to write as )
SELECT firstName + ' ' + Lastname ename,  Salary * 12 annualSal 
FROM EMP 
ORDER BY annualSal;

SELECT firstName+' '+Lastname ename,  Salary * 12 annualSal 
FROM EMP 
ORDER BY 2;

SELECT firstName+' '+Lastname ename,  Salary * 12 annualSal 
FROM EMP 
ORDER BY 2,3,4;
=======================================================================================================================================================
transaction , rollback , commit and read write consistency, optimistic loading and pessimistic loading 
-------------------------------------------------------------------------------------------------------------

🔹 1. Transaction
A transaction is a group of SQL operations that must be executed together.

If all operations succeed, the changes are saved permanently (Commit).
If one operation fails, everything is rolled back (undone).
🔹 Example:

Transfer ₹500 from Account A to Account B.
Two operations happen together:
Deduct ₹500 from Account A.
Add ₹500 to Account B.
If one operation fails, the other must be undone (Rollback).

🔹 2. Rollback
If an error occurs or you cancel a transaction, Rollback undoes all changes.
------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION;
UPDATE Accounts SET Balance = Balance - 500 WHERE AccountID = 1;
UPDATE Accounts SET Balance = Balance + 500 WHERE AccountID = 2;
-- Oops! Something went wrong
ROLLBACK;
------------------------------------------------------------------------------------------------------------
🛑 Effect: The ₹500 deduction is undone, and no money is lost.

🔹 3. Commit
When everything in a transaction runs successfully, COMMIT permanently saves changes.
-----------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION;
UPDATE Accounts SET Balance = Balance - 500 WHERE AccountID = 1;
UPDATE Accounts SET Balance = Balance + 500 WHERE AccountID = 2;
COMMIT;
-----------------------------------------------------------------------------------------------------------
✅ Effect: ₹500 is transferred successfully and cannot be undone.

🔹 4. Read-Write Consistency
Ensures data is correct and not partially updated while multiple users are accessing it.

Example Issue:

A customer is reading their bank balance.
At the same time, another transaction is updating the balance.
Without consistency, the customer might see a wrong/incomplete balance.
🛠 Solution:

Locking (so one user reads while another updates safely).
Isolation levels (prevent reading incomplete data).
-----------------------------------------------------------------------------------------------------------



