
======================================================================================================================
B2B : Back 2 basics => It is made as comprehensive not to be beginner friendly
======================================================================================================================
# Variables
=============
Variable Types: C# is a statically typed language, so you must declare the type of variable
 (e.g., int, string, double, etc.) before using it.
Naming Conventions: Variable names should be meaningful and follow C# naming conventions 
(e.g., camelCase for local variables).
Scope: The scope of a variable is defined by where it is declared. Variables can be declared
 at class level (fields) or inside methods (local variables).


- Datatypes 
================
    - f - for float eg. myFloat = 1.2345f (range 10^-45)
    - for double eg. No need to write any suffix (range 10 ^ -340)
    - m - for decimal eg. myDecimal = 1.2345m(range 10^-28)

Loop: 
=====
- we use for loop when we know there are fix number of iterations. Also while using loop initialize 
the variable inside of the loop otherwise it will 	cause the infinite loop.

Try-catch-finally:
==================
- finally statement is always run/executed (whether we execute try block with no exception or with exception).
But finally will not run if exception is unhandled e.g.	
	- if we catch exception then finally will get executed
	- if we handle specific exception and we got the different exception at the
     runtime then our code will be exited and finally will not be executed
	 e.g. 
	 we used catch block to handle the arithmetic exception but at runtime 
	 runtime we got null exception then our program will be terminated without
	 executing finally block.

======================================================================================================================================
-> Initialization and defination of variables 
======================================================================================================================================

using System;

class Program
{
    static void Main()
    {
        //Saperate declaration and defination
        double height;
        height = 5.5; 

	    // Declaration and Initialization at same time 
        int age = 25;
        string name = "Harshal";


        // Output the values (i.e. print on console)
        Console.WriteLine($"My name is {name} \n height is {height} \n age is {age}");
    }
}

======================================================================================================================
=> Diff ways to write  console.writeLine 
======================================================================================================================
using System;

class Program {
    
     public static void Main(String[] args){

        //========= way 0 : just write string inside double quotes=====
        Console.WriteLine("Hello Harshal"); 

        //========= way 1 : using co-ordinates 0,1,2 etc ============
        int a = 1;
        int b = 2;
        Console.WriteLine("Values of a is  {0} and b is {1}",a,b);

        //======== way 2 : by string concatenation  ===================
        string name = "Harshal";
        Console.WriteLine("My name is :"+ name );
        
        //======== way 3: using $ before string =================
        string msg = "I am harshal";
        Console.WriteLine($"Hello, {msg}");  

     }
}

=====================================================================================================================================
                                     # CLASS #
======================================================================================================================================
Calling function in same class : 
--------------------------------
    we can do it in two ways ->
	1. Create an object and then using that object call the method
	2. Static Method 
======================================================================================================================================
using System;

class Program {
    
    public void function1()
    {
        Console.WriteLine("This function is called in same class with class object");
    }

    public static void function2()
    {
        Console.WriteLine("This is static function called within same class without object" );
    }

    public static void Main(String[] args)
    {
        Console.WriteLine("Two way to call function in same class");

        //=========== way 1 : using object of class================

        Program pg = new Program();
        pg.function1();

        //=========== way 2 :  make function static ================
        function2();

    }
}

======================================================================================================================================

--------------------------------------------------------------------------------------------------------------------------------------
# function
--------------------------------------------------------------------------------------------------------------------------------------

===================================================================================================================
function 
- with passing no parameters and with passing parameters 
- With return type
===================================================================================================================

using System;

class Program {
    
   //================ No retun type ========================= 
    void Show1(){
        Console.WriteLine("Non parameter funtion called");
    }

    //parameterised function 
    void Show2(int a, int b){
        Console.WriteLine("Values passed {0} and {1}",a,b);
    }
    

    //================ with return type ===================    
    string Show3(string msg){
        Console.WriteLine("msg is :"+ msg);
        return msg;
    }
    
     public static void Main(String[] args){
        
        Program pg = new Program();

        pg.Show1();
        pg.Show2(1,2);


        string msg = pg.Show3("I am harshal");
        Console.WriteLine($"Hello, {msg}");       
     }
}

===================================================================================================================
function parameters passed by -
1. Pass by value : Don't change original value
-----------------
2. Pass by ref : changes actual value like pointers 
----------------
3."out" Parameter : 
-------------------
	     - reference-type, not require to initialize variable before passing
	     - We must use out keyword to pass argument as out-type
	     - It is useful when we want a function to return multiple values.

===================================================================================================================


using System;

public class Program
{
        //========= 1. Pass by value  ===========================
        void Show4(int val)
        {
            val *= val;  
            Console.WriteLine("Value inside the show4 function "+val);  
        }

        //========= 2. Pass by ref ===========================
        public void Show5(ref int val)  
        {  
                val *= val;  
                Console.WriteLine("Value inside the show5 function "+val);  
            
        }

	    //============ 3.1 How to use out variable =================
    	public void Show6(out int val)  
    	{  
            int square = 5;  
            val = square;  
            val *= val; // Manipulating value  
    	} 

    	
	    //==== 3.2 How to return multiple values using out parameter ===========
        public void Show7 (out int a, out int b) 
        {  
            int square = 5;  
            a = square;  
            b = square;  
            // Manipulating value  
            a *= a;   
            b *= b;  
        }  
    
    public static void Main(string[] args) 
    {
         Program pg = new Program();
         
	    int val = 50;  
        
         //========= 1. Pass by value  ===========================
	    
	        Console.WriteLine("Value before calling the show4 "+val);  

            pg.Show4(val); // Calling Function by passing value      

            Console.WriteLine("Value after calling the show4 " + val); //value doesn't change 
 
         //========= 2. Pass by ref ===========================

            Console.WriteLine("Value before calling the show5 "+val);

            pg.Show5(ref val); // Calling Function by passing reference            

            Console.WriteLine("Value after calling the show5 " + val);// value changes  

	    //============ 3. Using out variable =================

	    //============ 3.1 How to use out variable =================

            Console.WriteLine("Value before passing out variable " + val); 
            
            pg.Show6(out val);   

            Console.WriteLine("Value after recieving the out variable " + val); 

	    //============ 3.2 How to return multiple values using out parameter =================
            int val2 = 50, val3 = 100;  

            Console.WriteLine("Value before passing out var\n val1 = " + val2+" \n val2 = "+val3);  

            pg.Show7(out val2, out val3); 

            Console.WriteLine("Value after passing out var \n val1 = " + val2 + " \n val2 = " + val3);   
	    
    }
}


====================================================================================================
                                Object oriented programming
====================================================================================================
- Note you can't declare class in a private namespace  

- Basic example of a class 

public class Employee {
    public int Id ;
    public string Name ;
    public double salary;
    
    public void Insert (int i , string n, double s)
    {
        Id = i;
        Name = n;
        salary = s;
    }
    
    public void Display()
    {
        Console.WriteLine(Id+" "+Name+""+salary);
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e1 = new Employee();
       Employee e2 = new Employee();
    
        e1.Insert(1, "name 1", 10000.23);// call methods using objects
        e2.Insert(2, "name 2", 10000.65);
        
        e1.Display();
        e2.Display();
    }
}

--------constructor(parameterised and non-parameterised) ----------

public class Employee {
    public int Id ;
    public string Name ;
    public double salary;

    public Employee()
    {
        Console.WriteLine("Default constructor invoked ");
    }
    
    //Constructor do not require a return type
    public Employee (int i , string n, double s); //Parameterised
    {
        Id = i;
        Name = n;
        salary = s;
    }

    Note : here if parameter names and class properties have same name 
    then we use "this" keyword.

    ~Employee()
    {  
            Console.WriteLine("Destructor Invoked");  
    } 
    
    public void Display()
    {
        Console.WriteLine(Id+" "+Name+
        ""+salary);
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e0 = new Employee();
       Employee e1 = new Employee(1, "name 1", 10000.23);
       Employee e2 = new Employee(2, "name 2", 10000.65);
        
        e1.Display();
        e2.Display();
    }
}

# Static Constructor: 
----------------------
- while creating object/instance Static constructor called only once 
and that is when the class is load for the first time.
- It is used to initialize the static fields of the class.
- No matter how many objects of class are created but static contructor
called only once.

using System;
public class Employee {
    public int Id ;
    public string Name ;
    public double salary;

    static Employee()//kim : we can't apply "public" to static modifier
    {
        Console.WriteLine("Static constructor invoked ");
    } 

    public Employee()
    {
        Console.WriteLine("Default constructor invoked ");
    }
    
    
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e0 = new Employee();
       Employee e1 = new Employee();
       Employee e2 = new Employee();
    }
}

========================== copy Contructor ==================================

If we want to copy the object of same class when we want to use the same instance 
everytime e.g. instance e1 in below case can be s

//copy contructor
public class Employee {
    public int Id ;
    public string Name;
    
    public Employee(int i , string n)
    {
        Id = i;
        Name = n;
        Console.WriteLine($" PC : Id and Name is : {Id} and {Name} ");
    }
    
    public Employee(Employee e){
        Id = e.Id;
        Name = e.Name ;
        Console.WriteLine($"CC : Id and Name is : {Id} and {Name} ");
        
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
        Employee e1 = new Employee(1, "n1");
        Employee e2 = new Employee(e1);
    }
}

====================================================================================================


Q. why destructors are not needed in c# ?
=> destructors are not required in C#. The .NET garbage collector effectively
 manages memory, and the IDisposable interface provides a more controlled way
 to release unmanaged resources when necessary. Destructors should be used 
 sparingly and only when working with unmanaged resources that need to be 
 released explicitly.


Boxing and unboxing
----------------------
⚫ Boxing : Value type is converted to object type

 	object obj;
 	obj = 100; // this is boxing

⚫ Unboxing : Object type is converted to a value type

	int i = 123;
	object obj = i; //boxing
	int j = (int)obj; //unboxing

------------------------------
Types of Method Parameters 
------------------------------
- optional parameters : we give default values if user don't provide anything e.g. body temp = 37.
- Named and positional parameters : if we keep field(i.e. variable) name same then we don't need
to keep the sequence of arguments and parameters same . 
- params


STATIC 
-----------
1. Static field : 
- instance field which gets memory each time whenever you create object But if we are using 
same varible field at 100 places then its better to make it static so that it's copy get 
shared among all
-there is only one copy of static field created in the memory. It is shared to all the objects.
e.g. we can have multiple Accounts but it should have same rateOfInterest.Then we will declare 
it static.

using System;  
   public class Account  
    {  
        public int accno;   
        public String name;  
        public static float rateOfInterest=8.8f; 

        public Account(int accno, String name)  
        {  
            this.accno = accno;  
            this.name = name;  
        }  
          
        public void display()  
        {  
            Console.WriteLine(accno + " " + name + " " + rateOfInterest);  
        }  
   }  
   class TestAccount{  
       public static void Main(string[] args)  
        {  
            Account a1 = new Account(101, "Sonoo");  
            Account a2 = new Account(102, "Mahesh");  
            a1.display();  
            a2.display(); 

            Warning: But remember if you change value of static field then it will be changed 
            for all the fields 
              Account.rateOfInterest = 10.5f;//changing value   

            Account a3 = new Account(103, "Sonoo");  
            Account a4 = new Account(104, "Mahesh"); 
  
        }  
    } 


C# static class :
=================
Points to remember for C# static class
- C# static class contains only static members.
- C# static class cannot be instantiated.
- C# static class is sealed.
- C# static class cannot contain instance constructors.



Static Class in C#
A static class is a class that cannot be instantiated. It can only contain static members,
 which means all fields, methods, and properties of the class must also be static. Static
 classes are useful when you want to create utility classes that provide a collection of 
methods or constants without maintaining any state or instance data.

Rules for Static Classes
------------------------------
- No Instance Members: A static class cannot contain instance members like 
  non-static fields,properties, or methods.
- No Object Instantiation: You cannot create an object of a static class using the 
  new keyword.
- Static Constructor:
	- Static classes can have a static constructor. 
	- The static constructor is parameterless.
- Cannot have an access modifier (e.g., public, private).
- Is called automatically once, before any static member is accessed or any static method is called.   
- Static Fields: All fields in a static class must be static.
- Static Methods and Properties: All methods and properties in a static class mustbe static.   
- Inheritance: A static class cannot inherit from other classes, nor can it be inherited by any other class
    

public static class MathUtility
{
    // Static field
    private static int calculationCount = 0;

    // Static constructor
    static MathUtility()
    {
        Console.WriteLine("Static constructor of MathUtility invoked.");
    }

    // Static property
    public static int CalculationCount
    {
        get { return calculationCount; }
    }

    // Static method
    public static double Add(double a, double b)
    {
        calculationCount++;
        return a + b;
    }

    // Another static method
    public static double Multiply(double a, double b)
    {
        calculationCount++;
        return a * b;
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
        // Accessing static methods
        double sum = MathUtility.Add(3.5, 2.5); // Allowed
        double product = MathUtility.Multiply(4, 5); // Allowed

        // Accessing static property
        Console.WriteLine("Calculation count: " + MathUtility.CalculationCount); // Allowed
        
        // Cannot instantiate a static class
        // MathUtility mathUtility = new MathUtility(); // Not Allowed (Compile-time error)
    }
}

C# Properties
=================
	C# Properites doesn't have storage location. C# Properites are extension of fields 
and accessed like fields.

The Properties have accessors that are used to set, get or compute their values.

Usage of C# Properties
-----------------------
	- C# Properties can be read-only or write-only.
	- We can have logic while setting values in the C# Properties.
	- We make fields of the class private, so that fields can't be accessed from outside 
the class directly.
	- Now we are forced to use C# properties for setting or getting values.


using System;  
   public class Employee  
    {  
        private string name;  
  
        public string Name  
        {  
            get  
            {  
                return name;  
            }  
            set  
            {  
                name = value;  
            }  
        }  
   }  
   class TestEmployee{  
       public static void Main(string[] args)  
        {  
            Employee e1 = new Employee();  
            e1.Name = "Sonoo Jaiswal";  
            Console.WriteLine("Employee Name: " + e1.Name);  
        }  
    }  


======================================================================================================

using System;  
   public class Animal  
   {  
       public void eat() { Console.WriteLine("Eating..."); }  
   }  

   public class Dog: Animal  
   {  
       public void bark() { Console.WriteLine("Barking..."); }  
   }  

   class TestInheritance2{  
       public static void Main(string[] args)  
        {  
            Dog d1 = new Dog();  
            d1.eat();  
            d1.bark();  
        }  
    }  



=================================================================================================================================================
 When to use => Abstract , virtual ,overriding (polymorphism) and static :

------------------------------ Summary of below notes -------------------------------------------------------------

1. Use virtual when you want to allow overriding --------------> but provide a default implementation.
2. Use abstract when you want to enforce method overriding ----> without a default implementation.
3. Use static when the method does not depend on object instances.
4. Use override when you want to modify the behavior of an inherited method.

=================================================================================================================================================
Got it! Let’s go through overriding concepts in C# with a clear explanation and real-world examples so that you never forget them! 🚀

We'll cover:
1️⃣ What is Method Overriding?
2️⃣ virtual and override (Polymorphism)
3️⃣ abstract methods and classes
4️⃣ static methods
5️⃣ When to use each one?

1️⃣ What is Method Overriding?
🔹 Method Overriding allows a child class to provide a specific implementation of a method that is already defined in its parent class.
🔹 Key points:
✔ The parent method must be marked as virtual or abstract.
✔ The child class must use override to modify it.

🔷 Example Without Overriding
---------------------------------------------------------------------------------------------------------------------------------------------------
class Animal
{
    public void MakeSound()  // No virtual keyword → Can't be overridden
    {
        Console.WriteLine("Animals make sounds...");
    }
}

class Dog : Animal
{
    public void MakeSound()  // This hides the parent method, but does NOT override it
    {
        Console.WriteLine("Dog barks!");
    }
}

class Program
{
    static void Main()
    {
        Animal myDog = new Dog();
        myDog.MakeSound();  // Output: Animals make sounds...
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------
🚨 Problem: Even though myDog is a Dog, it calls the parent class method instead of Dog’s method.

2️⃣ Using virtual and override (Polymorphism)
🔹 If we want to override the method properly, the parent method must be virtual, and the child must use override.

✅ Proper Overriding Using virtual and override
---------------------------------------------------------------------------------------------------------------------------------------------------
class Animal
{
    public virtual void MakeSound()  // Allow overriding
    {
        Console.WriteLine("Animals make sounds...");
    }
}

class Dog : Animal
{
    public override void MakeSound()  // Override the parent method
    {
        Console.WriteLine("Dog barks!");
    }
}

class Program
{
    static void Main()
    {
        Animal myDog = new Dog();
        myDog.MakeSound();  // Output: Dog barks! ✅ (Correct method is called)
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Why use virtual and override?
✔ Polymorphism: You can use Animal reference to call Dog’s overridden method dynamically.
✔ Code Flexibility: New subclasses (e.g., Cat) can provide their own behavior without changing Animal.

3️⃣ abstract Methods and Classes
🔹 Abstract classes are incomplete classes that must be inherited.
🔹 Abstract methods do not have a body in the parent class, forcing child classes to implement them.

✅ Example of abstract Class and Method
----------------------------------------------------------------------------------------------------------------------------------------------------
abstract class Animal
{
    public abstract void MakeSound();  // No body → Must be overridden in child
}

class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Dog barks!");
    }
}

class Cat : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Cat meows!");
    }
}

class Program
{
    static void Main()
    {
        Animal myDog = new Dog();
        myDog.MakeSound();  // Output: Dog barks!

        Animal myCat = new Cat();
        myCat.MakeSound();  // Output: Cat meows!
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------
🔹 When to use abstract?
✔ Use it when the base class should never be instantiated (e.g., Animal).
✔ Enforces that all subclasses must implement the method.

🚨 Difference between virtual and abstract?
--------------------------------------------------------------------------------------------------------------------------------
Feature					virtual Methods				abstract Methods
Has a body?				✅ Yes, can have a default body		❌ No, must be implemented by subclasses
Can be overridden?			✅ Yes					✅ Must be overridden
Requires child class to implement?	❌ No, optional				✅ Yes, mandatory
--------------------------------------------------------------------------------------------------------------------------------
4️⃣ static Methods
🔹 Static methods belong to the class itself, not to an instance.
🔹 They cannot be overridden because they are not tied to objects.

✅ Example of static Method
----------------------------------------------------------------------------------------------------------------------------
class MathOperations
{
    public static int Add(int a, int b)
    {
        return a + b;
    }
}

class Program
{
    static void Main()
    {
        int sum = MathOperations.Add(5, 3);  // Call without creating an object
        Console.WriteLine(sum);  // Output: 8
    }
}
-----------------------------------------------------------------------------------------------------------------------------
🔹 When to use static?
✔ When the method does not need an instance of the class (e.g., utility functions).
✔ Cannot use override because static methods do not belong to objects.

🚨 Static vs. Instance Methods
--------------------------------------------------------------------------------------------------------
Feature				static Methods		Instance Methods (virtual/override)
Tied to object?			❌ No			✅ Yes
Can be overridden?		❌ No			✅ Yes
Requires new keyword to call?	❌ No			✅ Yes
----------------------------------------------------------------------------------------------------------
5️⃣ Summary: When to Use Each?
-----------------------------------------------------------------------------------------------------------
Keyword	Used In		Can Be Overridden?	Must Override?		Purpose
virtual	Methods			✅ Yes			❌ No			Allows method to be optionally overridden
override Methods	✅ Yes		✅ Yes		Overrides a virtual or abstract method
abstract Methods	✅ Yes		✅ Yes		Forces child class to provide implementation
static	Methods		❌ No		❌ No		Belongs to the class, not objects
-----------------------------------------------------------------------------------------------------------
6️⃣ Real-World Example
Let’s say we have a payment system that supports PayPal and Credit Card payments.

✅ Using abstract and override
-----------------------------------------------------------------------------------------------------------
abstract class Payment
{
    public abstract void ProcessPayment();  // Must be overridden
}

class PayPalPayment : Payment
{
    public override void ProcessPayment()
    {
        Console.WriteLine("Processing PayPal payment...");
    }
}

class CreditCardPayment : Payment
{
    public override void ProcessPayment()
    {
        Console.WriteLine("Processing Credit Card payment...");
    }
}

class Program
{
    static void Main()
    {
        Payment payment = new PayPalPayment();
        payment.ProcessPayment();  // Output: Processing PayPal payment...

        payment = new CreditCardPayment();
        payment.ProcessPayment();  // Output: Processing Credit Card payment...
    }
}
-----------------------------------------------------------------------------------------------------------
✅ Why is this good?
✔ Encapsulation: ProcessPayment details are hidden.
✔ Polymorphism: We can add GooglePayPayment or BitcoinPayment without modifying existing code.

Final Thought 💡
Use virtual when you want to allow overriding but provide a default implementation.
Use abstract when you want to enforce method overriding without a default implementation.
Use static when the method does not depend on object instances.
Use override when you want to modify the behavior of an inherited method.




=================================================================================================================================
LINQ - short summery
=================================================================================================================================
1. Arithmetical functions  and Position functions:
--------------------------------------------------
public class HelloWorld
{
    public static void Main(string[] args)
    {
        List<int> list = new List<int> {1,2,3,4,5,6,7,8,9,10};
        var max = list.Max();
        var min = list.Min();
        var Count = list.Count();
        var Sum = list.Sum();
        var avg = list.Average();
        Console.WriteLine("Max: " + max +" Min: " +min +" Count: " +Count +" Sum: " +Sum + "Average: "+ avg);
        int getAvg = Sum/Count;
	Console.WriteLine("Average: " + getAvg);

		//========== Positional =============
		int first = list.First();
		int last = list.Last();
		int secondPosition = list.ElementAt(1);
		Console.WriteLine($"first = {first}, last = {last} , at second position = {secondPosition}");
		//=========== Position or default ====================
		=> here FirstOrDefault, LastOrDefault,ElementAtOrDefault, SingleOrDefault()
		int firstOrDefault = numbers.FirstOrDefault();
		Console.WriteLine("FirstOrDefault: " + firstOrDefault); // Output: FirstOrDefault: 1 and if array is empty o/p will be Default(0)

		SingleOrDefault()=> //Single: the dataset must have only one element or else it give exception. 

----------------------------------------------------------------------
Partition operator (take/skip first 100 or give letter start with "u")
----------------------------------------------------------------------
string[] countries = {  "US", "UK", "India", "Russia", "China", "Australia", "Argentina" };

//Take first 3 countries =>  IEnumerable<string> result = countries.Take(3); 
 
// Skip 3 countries => IEnumerable<string> result = countries.Skip(3);             
		
// Take countries starting with "u" => IEnumerable<string> result = countries.TakeWhile(x => x.StartsWith("U"));
		      
	
    }
}
============================ Data storage structure of operations like searching , sorting , filtering ===============================
Summary of Significance and Usage:
=======================================================================================================================================
Type	   |  Significance	                        | Usage Need
=======================================================================================================================================
Array	   |  Fixed-size, efficient access by index.	| When you have a known, unchanging number of elements.
=======================================================================================================================================
List	   |  Dynamic-size, provides methods to add,    | When the number of elements can change and you need list-specific operations.
           |  remove, and manipulate elements.	        |
=======================================================================================================================================
Dictionary | Key-value pairs, fast lookups by           | When you need to associate unique keys with values for quick lookup.
           |  unique keys.	                        |
=======================================================================================================================================

Summery 
==================
        => Arrays are best for scenarios where you need fast access by index and have a fixed number of elements. They are also good 
        for sorting operations.
        => Lists are best for scenarios where you need dynamic resizing, frequent insertions and deletions, and operations like 
        filtering and sorting.
        => Dictionaries are best for scenarios where you need fast lookups by key and want to associate unique keys with values.








































