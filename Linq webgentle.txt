        =================================================================================================================================
                                                        LINQ PART 2 : WebGentle YT Channel
        =================================================================================================================================

--------------------------------------------------------------------------------------------------------------------------------------------------            
            Lect 06: Projection: select data in original form or any other form.
--------------------------------------------------------------------------------------------------------------------------------------------------

//Lec 06 : Select statement(List,prop,one class, two class, anonymous class, index)
    
namespace LinqSample1
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Employees> employees = new List<Employees>()
              {

                  new Employees() {Id = 1, Name = "Tom", Email = "tom@email.com"},
                  new Employees() {Id = 2, Name = "Sarah", Email = "sarah@email.com"},
                  new Employees() {Id = 3, Name = "Mike", Email = "mike@email.com"},
                  new Employees() {Id = 4, Name = "Linda", Email = "linda@email.com"},
                  new Employees() {Id = 5, Name = "James", Email = "james@email.com"},
                  new Employees() {Id = 6, Name = "Karen", Email = "karen@email.com"},
                  new Employees() {Id = 7, Name = "Robert", Email = "robert@email.com"},
                  new Employees() {Id = 8, Name = "Emily", Email = "emily@email.com"},
                  new Employees() {Id = 9, Name = "John", Email = "john@email.com"},
                  new Employees() {Id = 10, Name = "Sophia", Email = "sophia@email.com"},
              };
        }
        public class Employees
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Email { get; set; }
        }
    }
}



 // ================ to get List =================================
            //1. Query syntax
            var getAll = (from emp in employees select emp).ToList();// IN query also we need to write this ToList() method ;

            foreach (var emp in getAll)
            {
                Console.WriteLine($"Employee ID = {emp.Id} , Name = {emp.Name} , Email = {emp.Email}");
            }

            //2. Method syntax
            var getAllM = employees.ToList();

            foreach (var emp in getAllM)
            {
                Console.WriteLine($"Employee ID = {emp.Id} , Name = {emp.Name} , Email = {emp.Email}");
            }


// ================ to get List of any one property =================================
            //1. Query syntax
            var propQuery = (from emp in employees select emp.Id).ToList();// IN query also we need to write this ToList() method ;

            foreach (var Id in propQuery)
            {
                Console.WriteLine($"Employee ID = {Id}");
            }

            //2. Method syntax
            Console.WriteLine("=============  Method syntax =========");
            var propMethod = employees.Select( e => e.Id).ToList();

            foreach (var Id in propMethod)
            {
                Console.WriteLine($"Employee ID = {Id}");
            }

// ================ to get List of any one property  and use it in query =================================
       //1. Query syntax
       var propQuery = (from emp in employees
                        select emp.Id)//we got here id so we can do any operation like below 
                        .ToList();

       /*
            //e.g.1)  emp.Id + 1(increase id by one )

           var propQuery = (from emp in employees
                            select emp.Id + 1)
                            .ToList();


           // e.g.2)  convert to string emp.Id.ToString();

                   var propQuery1 = (from emp in employees
                                   select emp.Id.ToString())
                                   .ToList();

            */
// ============= How to select only specific columns ===========
          

            var propQuery = (from emp in employees
                             select new Employees()
                             {
                                 Id = emp.Id,
                                 Name = emp.Name
                             }).ToList();

            foreach (var emp in propQuery)
            {
                Console.WriteLine($" Id = {emp.Id}  and Name = {emp.Name}");
            }


// ============= How to assign the props of employee class to student class ===========

                var selectQuery = (from emp in employees
                                select new Student()
                                {
                                    StudentId = emp.Id,
                                    FullName = emp.Name,
                                    StudentEmail = emp.Email
                                }).ToList();

                                
                Console.WriteLine("== Forcefully converted employee to students==");

                foreach (var st in selectQuery)
                {
                    Console.WriteLine($" Id = {st.StudentId}  and Name = {st.FullName}  Email = {st.StudentEmail}");
                }

    //OR


            var selectMethod = employees.Select(emp => new Student()
                {
                    StudentId = emp.Id,
                    FullName = emp.Name,
                    StudentEmail = emp.Email
                }).ToList();

            Console.WriteLine("== Forcefully converted employee to students==");

                foreach (var item  in selectMethod)
                {
                    Console.WriteLine($" Id = {item.StudentId}  and Name = {item.FullName}  Email = {item.StudentEmail}");
                }

    // =========== Bina maa baap ka object(anonymous object) ============


                var selectQuery = (from emp in employees
                                select new 
                                {
                                    StudentId = emp.Id,
                                    FullName = emp.Name,
                                    StudentEmail = emp.Email
                                }).ToList();

                                //OR

                var selectMethod = employees.Select(emp => new 
                {
                    StudentId = emp.Id,
                    FullName = emp.Name,
                    StudentEmail = emp.Email
                }).ToList();

//======= print Anonymous object with Index ======================

            Console.WriteLine("==== print Anonymous object with Index ====");
            
            var IndexObj = employees.Select( (emp, index) =>  new {FullName = emp.Name , Index = index}).ToList();

            foreach (var item in IndexObj)
            {
                Console.WriteLine($" Index = {item.Index}  and Name = {item.FullName}  ");
            }


// ===== Lec 07 : SelectMany() =====

            var strList = new List<string>() { "Tom", "John" };


            var methodResult = strList.SelectMany(x => x).ToList();//It contains 7 char(t,o,m,j,o,h,n)

            //OR 

            var queryResult = (from rec in strList
                               from  ch in rec
                              select ch).ToList();// this will give number of char and their ascii values

//==========


    public class Employees
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }

        public List<string> Programming {  get; set; }

    }
            var dataset = new List<Employees>() {
                new Employees() { Id = 1, Name = "Tom" , Email = "Tom@email.com" , Programming = new List<String>{"C#","PHP","JAVA" } } ,
                new Employees() { Id = 2, Name = "Harry" , Email = "Harry@email.com" , Programming = new List<String>{ "LINQ", "C#", "MVC" } },
                new Employees() { Id = 3, Name = "John" , Email = "John@email.com" , Programming = new List<String>{ "LINQ", "VB", "SQL" } }
            };

              var  MethodSyntax = dataset.SelectMany(emp => emp.Programming).ToList();

                foreach (var item in MethodSyntax)
                {
                    Console.WriteLine(" Programming language =  " + item);
                }

//OR
             var querySyntax = (from emp in dataset
                    from skill in emp.Programming
                    select skill
                     ).ToList();

                foreach (var item in querySyntax)
                {
                    Console.WriteLine(" Programming  =  " + item);
                }


// ============= List of objects of subclass  ============

              //==== classes required for program ======

        public class Employees
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Email { get; set; }

            public List<Tech> Programming { get; set; }

        }

        public class Tech
        {

            public string Technology { get; set; }
        }

                    //========== Program =======================

            var dataset = new List<Employees>() {
                    new Employees() { Id = 1, Name = "Tom" , Email = "Tom@email.com" , Programming = new List<Tech>{ 
                                                new Tech() { Technology = "C#" },
                                                new Tech() { Technology = "PHP" },
                                                new Tech() { Technology = "JAVA" } } } ,
                    new Employees() { Id = 2, Name = "Harry" , Email = "Harry@email.com" , Programming = new List<Tech>{ 
                                                new Tech() { Technology = "LINQ" },
                                                new Tech() { Technology = "C#" },
                                                new Tech() { Technology = "MVC" } } },
                    new Employees() { Id = 3, Name = "John" , Email = "John@email.com" , Programming = new List < Tech > { 
                                                new Tech() { Technology = "LINQ" }, 
                                                new Tech() { Technology = "VB" }, 
                                                new Tech() { Technology = "SQL" } } },
                    new Employees() { Id = 4,Name = "King" , Email = "King@email.com", Programming = new List<Tech> ()},
                    new Employees() { Id = 5,Name = "Raftaar" , Email = "Raftaar@email.com", Programming = new List<Tech> ()}
            };

            var MethodQuery = dataset.SelectMany(emp => emp.Programming).ToList();

            foreach (var item in MethodQuery)
            {
                Console.WriteLine(" Programming obj =  " + item.Technology);
            }

        //OR 

        var querySyntax =  var querySyntax = (from emp in dataset
                        from pro in emp.Programming
                        select pro).ToList();

        foreach (var item in querySyntax)
        {
            Console.WriteLine(" Programming obj =  " + item.Technology);
        }


------------------------------------------------------------------------------------------------------------------------------------------------
======== Lec 08, 09, 10 : filtering operators =============
------------------------------------------------------------------------------------------------------------------------------------------------
There are two types of filtering 
    1. where ()
    2. OfType()
    
======== Lec 09 : where()

    1. where  =>  to filter specific data from a data source based on a condition
    ===========
    - Always expects a condition.

    => Conditions can be written using the following symbols:
        == (equal to)
        >= (greater than or equal to)
        <= (less than or equal to)
        > (greater than)
        < (less than)
        || (logical OR)

                    ===========================================================================

                                List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

                                
                                    var querySyntax = (from ele in list
                                                    where ele > 5
                                                    select ele).ToList();

                                    foreach ( var ele in querySyntax )
                                    {
                                        Console.WriteLine(ele);
                                    }
                                    Console.WriteLine("======================");

                                    var methodSyntax = list.Where(ele => ele > 5).ToList();

                                    foreach (var ele in methodSyntax)
                                    {
                                        Console.WriteLine(ele);
                                    }


                    ====================================================================

                                    List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

                                    var querySyntax = (from ele in list
                                                    where ele <= 5 || ele >9
                                                    select ele).ToList();

                                    foreach ( var ele in querySyntax )
                                    {
                                        Console.WriteLine(ele);
                                    }
                                    Console.WriteLine("======================");

                                    var methodSyntax = list.Where(ele => ele <= 5 || ele > 9).ToList();

                                    foreach (var ele in methodSyntax)
                                    {
                                        Console.WriteLine(ele);
                                    }
                    ===================================================================
                                    List<string> names = new List<string>() 
                                        {  
                                            "Alice","Bob","Charlie", "Diana", "Edward",
                                            "Fiona","George","Hannah","Ian","Jackie"
                                        };


                                        var querySyntax = (from str in names
                                                        where str.Length <= 3
                                                        select str).ToList();

                                        foreach ( var ele in querySyntax )
                                        {
                                            Console.WriteLine(ele);
                                        }
                                        Console.WriteLine("======================");

                                        var methodSyntax = names.Where(str => str.Length <= 3).ToList();

                                        foreach (var ele in methodSyntax)
                                        {
                                            Console.WriteLine(ele);
                                        }

                                ====================================================================

                                        var querySyntax = (from str in names
                                                where  str == "tom" || str.Length < 5
                                                select str).ToList();

                                        foreach ( var ele in querySyntax )
                                        {
                                            Console.WriteLine(ele);
                                        }
                                        Console.WriteLine("======================");

                                        var methodSyntax = names.Where(str => str == "tom" || str.Length < 5).ToList();

                                        foreach (var ele in methodSyntax)
                                        {
                                            Console.WriteLine(ele);
                                        }

                                ==============================================================================
                                        var dataset = new List<Employees>() {
                                            new Employees() { Id = 1, Name = "Tom" , Email = "Tom@email.com" , Programming = new List<Tech>{ 
                                                                        new Tech() { Technology = "C#" },
                                                                        new Tech() { Technology = "PHP" },
                                                                        new Tech() { Technology = "JAVA" } } } ,
                                            new Employees() { Id = 2, Name = "Harry" , Email = "Harry@email.com" , Programming = new List<Tech>{ 
                                                                        new Tech() { Technology = "LINQ" },
                                                                        new Tech() { Technology = "C#" },
                                                                        new Tech() { Technology = "MVC" } } },
                                            new Employees() { Id = 3, Name = "John" , Email = "John@email.com" , Programming = new List < Tech > { 
                                                                        new Tech() { Technology = "LINQ" }, 
                                                                        new Tech() { Technology = "VB" } } },
                                            new Employees() { Id = 4,Name = "King" , Email = "King@email.com", Programming = new List<Tech> ()},
                                            new Employees() { Id = 5,Name = "Raftaar" , Email = "Raftaar@email.com", Programming = new List<Tech> ()}
                                        };


                                        var querySyntax = (from emp in dataset
                                        where emp.Programming.Count == 0
                                        select emp).ToList();

                                        var methodQuery = dataset.Where(emp => emp.Programming.Count == 0).ToList();
                                ==============================================================================
                                        var querySyntax = (from emp in dataset
                                                        where emp.Programming.Count == 2
                                                        select emp).ToList();

                                        var methodQuery = dataset.Where(emp => emp.Programming.Count == 2).ToList();
                                ==============================================================================
                                var querySyntax = (from emp in dataset
                                            where emp.Programming.Count == 2
                                            && emp.Id == 4
                                            select emp).ToList();

                        var methodQuery = dataset.Where(emp => emp.Programming.Count == 2 && emp.Id == 4).ToList();
                        ============================================================================================
=============Lec 10 : OFType

2. OfType : used as generic method to filter data according to the datatype

            var dataSource = new List<object>() { "Adam", "Harry", "Kim", "John", 1, 2, 3, 4, 5};
            var methodSyntax = dataSource.OfType<string>().ToList();
            var querySyntax (from x in dataSource where x is string select x).ToList();

            ===================================================================================================

            var dataSource = new List<object>() { "Adam", "Harry", "Kim", "John", 1, 2, 3, 4, 5};
            var methodSyntax = dataSource.OfType<string>().Where(x => x.tength > 3).ToList();
            var querySyntax = (from x in dataSource
                   let str = x as string
                   where str != null && str.Length > 3
                   select str).ToList();
------------------------------------------------------------------------------------------------------------------------------------------------
=========== Lec 11 : Sorting operations ====================================================================
------------------------------------------------------------------------------------------------------------------------------------------------
Lec 12 : order by 

            var dataset = new List<int>() { 1,12,24,75,85,94,63,74,35};
                    //==============================================

                    var querySyntax = ( from num in dataset
                                        orderby num select num ).ToList();

                    var methodQuery = dataset.OrderBy(num => num).ToList();

                    //=====with where condition =======
                    
                      var querySyntax = ( from num in dataset
                      where num > 10
                      orderby num 
                      select num ).ToList();

                        var methodQuery = dataset.Where(num => num >10).OrderBy(num => num).ToList();

        ====================================================================================================

          List<string> names = new List<string>() 
            {  
                "Alice","Bob","Charlie", "Diana", "Edward",
                "Fiona","George","Hannah","Ian","Jackie"
            };

        ========= Arrange names in alphabetical order ============

        var querySyntax = (form nm in names 
                            orderby nm 
                            select nm 
                            ).ToList();

        var methodQuery = names.OrderBy( names =>names).ToList();

        =========== Sort according to number of letters in names ====

        var querySyntax = ( from nm in names 
                            where nm.Length >3
                            orderby nm 
                            select nm)
                            .ToList();

        var methodQuery = names
                        .Where(nm => nm.Length > 3 )
                        .OrderBy(nm =>nm)
                        .ToList();

    //================== within the objects =================

        var dataset = new List<Employees>() {
                new Employees() { Id = 1, Name = "Tom" , Email = "Tom@email.com"  } ,
                new Employees() { Id = 2, Name = "Harry" , Email = "Harry@email.com"  },
                new Employees() { Id = 3, Name = "John" , Email = "John@email.com"  }
            };

            var querySyntax = (from emp in dataset
                              orderby emp.Id 
                              select emp
                              ).ToList();

            var methodSyntax = dataset.OrderBy(emp => emp.Name).ToList();

            foreach (var item in querySyntax)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Email = {item.Email}");
            }

//===============================================================================================

Lec 13 : order by descending 

        
            var dataset = new List<int>() { 1,12,24,75,85,94,63,74,35};
                    //==============================================

                    var querySyntax = ( from num in dataset
                                        orderby num descending
                                        select num ).ToList();

                    var methodQuery = dataset.OrderByDescending(num => num).ToList();

                    //=====with where condition =======
                    
                      var querySyntax = ( from num in dataset
                      where num > 10
                      orderby num descending
                      select num ).ToList();

                var methodQuery = dataset.Where(num => num >10).OrderByDescending(num => num).ToList();

        ====================================================================================================

          List<string> names = new List<string>() 
            {  
                "Alice","Bob","Charlie", "Diana", "Edward",
                "Fiona","George","Hannah","Ian","Jackie"
            };

        ========= Arrange names in alphabetical order ============

        var querySyntax = (form nm in names 
                            orderby nm descending
                            select nm 
                            ).ToList();

        var methodQuery = names.OrderByDescending( names =>names).ToList();

        =========== Sort according to number of letters in names ====

        var querySyntax = ( from nm in names 
                            where nm.Length >3
                            orderby nm descending
                            select nm)
                            .ToList();

        var methodQuery = names
                        .Where(nm => nm.Length > 3 )
                        .OrderByDescending(nm =>nm)
                        .ToList();

    //================== within the objects =================

        var dataset = new List<Employees>() {
                new Employees() { Id = 1, Name = "Tom" , Email = "Tom@email.com"  } ,
                new Employees() { Id = 2, Name = "Harry" , Email = "Harry@email.com"  },
                new Employees() { Id = 3, Name = "John" , Email = "John@email.com"  }
            };

            var querySyntax = (from emp in dataset
                              orderby emp.Id descending
                              select emp
                              ).ToList();

            var methodSyntax = dataset.OrderByDescending(emp => emp.Name).ToList();

            
            foreach (var item in querySyntax)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Email = {item.Email}");
            }

//================================================================================================

Lec 14 : ThenBy and ThenByDescending

        It is used for second level of the sorting operation( e.g sort by first name and then sort this names later with the lastname)

Program 
============

        
            var dataset = new List<Employees>() {
                new Employees() { Id = 2, Name = "Harry" , LastName = "LN2"},
                new Employees() { Id = 3, Name = "John" ,  LastName = "LN3"  },
                new Employees() { Id = 1, Name = "Tom" , LastName = "LN1"   } ,
                new Employees() { Id = 4, Name = "Tom" , LastName = "LN4"}
            };

            Console.WriteLine("=== a + a =======");

            var querySyntax = (from emp in dataset
                               orderby emp.Name , emp.LastName
                               select emp
                              ).ToList();
            foreach (var item in querySyntax)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Lastname = {item.LastName}");
            }

            Console.WriteLine("====== d + a ===================");

            var methodSyntax = dataset.OrderBy(emp => emp.Name).ThenBy(emp => emp.LastName).ToList();

            var querySyntax1 = (from emp in dataset
                               orderby emp.Name descending , emp.LastName
                               select emp
                              ).ToList();

            foreach (var item in querySyntax1)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Lastname = {item.LastName}");
            }

            Console.WriteLine("==== a + d ==========");

            var querySyntax2 = (from emp in dataset
                                orderby emp.Name , emp.LastName descending
                                select emp
                              ).ToList();

            foreach (var item in querySyntax2)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Lastname = {item.LastName}");
            }

            Console.WriteLine("======= d + d => qs ======");

            var querySyntax3 = (from emp in dataset
                                orderby emp.Name descending, emp.LastName descending
                                select emp
                              ).ToList();

            foreach (var item in querySyntax3)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Lastname = {item.LastName}");
            }
            Console.WriteLine("======= d + d => ms ======");
            var methodSyntax1 = dataset.OrderByDescending(emp => emp.Name).ThenByDescending(emp => emp.LastName).ToList();


            foreach (var item in methodSyntax1)
            {
                Console.WriteLine($"Id = {item.Id}, Name = {item.Name} , Lastname = {item.LastName}");
            }



OUTPUT :
-----------------

=== a + a =======
Id = 2, Name = Harry , Lastname = LN2
Id = 3, Name = John , Lastname = LN3
Id = 1, Name = Tom , Lastname = LN1
Id = 4, Name = Tom , Lastname = LN4
====== d + a ===================
Id = 1, Name = Tom , Lastname = LN1
Id = 4, Name = Tom , Lastname = LN4
Id = 3, Name = John , Lastname = LN3
Id = 2, Name = Harry , Lastname = LN2
==== a + d ==========
Id = 2, Name = Harry , Lastname = LN2
Id = 3, Name = John , Lastname = LN3
Id = 4, Name = Tom , Lastname = LN4
Id = 1, Name = Tom , Lastname = LN1
======= d + d => qs ======
Id = 4, Name = Tom , Lastname = LN4
Id = 1, Name = Tom , Lastname = LN1
Id = 3, Name = John , Lastname = LN3
Id = 2, Name = Harry , Lastname = LN2
======= d + d => ms ======
Id = 4, Name = Tom , Lastname = LN4
Id = 1, Name = Tom , Lastname = LN1
Id = 3, Name = John , Lastname = LN3
Id = 2, Name = Harry , Lastname = LN2

//================ Lec 15 : Reverse()  ========================

Reverse function 
-----------------

    -   It reverses the data e.g 1 to 100 is reversed as 100 to 1 , 
        like descending order.
        BUT
        it reverses without sorting them ascending or descending it just reverses the raw data
    -   We don't pass any arguments in it (we directly write it at the end of the object)
        eg. methodquery = Employee.Reverse();

              int[] RollNum = new int[] { 1,2,3,4,5,6,7,8,9,10};

              // directly reverse original object

                RollNum.Reverse();


                var qs = (from num in RollNum select num).Reverse();

                foreach (var r in qs)
                {
                    Console.WriteLine(r);
                }
                Console.WriteLine("==== methodquery ======");
                var ms = RollNum.Reverse();

                foreach (var r in ms)
                {
                    Console.WriteLine(r);
                }

//====================================================================================================================

            List<string> names = new List<string>() 
            {  
                "Alice","Bob","Charlie", "Diana", "Edward",
                "Fiona","George","Hannah","Ian","Jackie"
            };

            //But list of strings can be directly reversed 
            names.Reverse();

---------------------------------------------------------------------------------------------------------------------------------------------
//=========================           Quantifies operators:     ===================================
---------------------------------------------------------------------------------------------------------------------------------------------
Lec 16 Quantifies operators: 

  -  We use these to check if all or some elements of datasource satisfty the given condition or not.
  -  return boolean values
  -  conditions are for all or some values in datasource



































            


