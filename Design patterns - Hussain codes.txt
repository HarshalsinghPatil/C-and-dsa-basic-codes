I. Creational Patterns
-------------------------
1.Factory Method: Defines an interface for creating objects but lets subclasses alter the type of objects that will be created.
Abstract Factory: Provides an interface for creating families of related or dependent objects without specifying their concrete classes.
Builder: Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.
Prototype: Specifies the kind of objects to create using a prototypical instance, and creates new objects by copying this prototype.
Singleton: Ensures a class has only one instance and provides a global point of access to it.


II. Structural Patterns
===============================
Adapter: Allows incompatible interfaces to work together by acting as a bridge between them.
Bridge: Decouples an abstraction from its implementation so that the two can vary independently.
Composite: Composes objects into tree structures to represent part-whole hierarchies, allowing clients to treat individual objects and compositions of objects uniformly.
Decorator: Attaches additional responsibilities to an object dynamically and provides a flexible alternative to subclassing for extending functionality.
Facade: Provides a unified interface to a set of interfaces in a subsystem, simplifying usage and client interaction with the subsystem.
Flyweight: Uses sharing to support large numbers of fine-grained objects efficiently by sharing common parts of the state among many objects.
Proxy: Provides a surrogate or placeholder for another object to control access to it.
Private Class Data : 


III. Behavioral Patterns
====================================
Chain of Responsibility: Lets more than one object handle a request by passing the request along a chain of handlers.
Command: Encapsulates a request as an object, thereby allowing for parameterization of clients with different requests, queueing of requests, and logging of the requests.
Interpreter: Defines a grammatical representation for a language and provides an interpreter to deal with this grammar.
Iterator: Provides a way to access elements of an aggregate object sequentially without exposing its underlying representation.
Mediator: Defines an object that encapsulates how a set of objects interact, promoting loose coupling by keeping objects from referring to each other explicitly.
Memento: Captures and externalizes an objectâ€™s internal state without violating encapsulation, so that the object can be restored to this state later.
Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
State: Allows an object to alter its behavior when its internal state changes, appearing as if the object changed its class.
Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.
java - var arg test
c# = param array test

Template Method: Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.
Visitor: Represents an operation to be performed on elements of an object structure, allowing new operations to be defined without changing the classes of the elements on which it operates.