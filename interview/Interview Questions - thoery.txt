============ Theory Questions ================================
----------------- surat company ----------------------
1. what is .net core ? diff between .net and .net core?
2. What are oops  and explain all concepts?
3. folder structure of web api? 
4. Have u used entity framework core or have any idea what it does? How migration is done complete set up with running commands
5. what is having and how do we use it ?
6. query for counting aggregates 
8. routing in .NET core project 
9. what are middleware in C#
10. In your resume you have written docker and kubernates azure and git , do you have any idea about them ?
11. How to establish relation ship between two tables ?
12. what is foreign key?
13. what is left join and what will be its output?
14. what is signal R ?
15. Do u have any idea about web sockets? and have u used them ?
----------------- omni wise ----------------------------------------
-> Diff between .net and .net core 
-> web services vs web API 
-> Do you have idea about Dependency injection
-> Web.config file do u have web.config file in .net core web api App ?
-> show me in writing  how u will handle a specific exception and normal exception?
-> what is diff between implementation inheritance and interface inheritance ?
-> do you know about reflection ?
-> what is diff between task and thread?

------------------------ money honey -------------------------
-> how many types of constructors in c#
-> types of access modifiers
-> what are bad effect of boxing and unboxing if we do it ? 
->  managed and unmanaged code 
-> remove duplicates using query
-> how garbage collection works in c# ? 
-> how many types of authentication done in api ? -  API keys, HTTP Basic Authentication, OAuth, and JWT
-> diff between value types and ref types?
-> tell me diff between public , protected , private ? their scopes(i.e. solution or assembly level)


------------------------ Deloitte -----------------------------------------------
- .net and .NET core web api
- oops 
- what is runtime polymorphism ? overloading and overriding?
- diff between abstraction and encapsulation?
- abstract class vs interface ?
- explain jwt authentication and how you have used it in frontend ?

------------------------ sparkle Web -----------------------------------------------
Hi hello harshal
tell me about yourself ?- .net vs .net core 
- oops , interface vs abstract class,  
- What is the difference between AddSingleton(), AddScoped(), and AddTransient()?
            Answer:
            Lifetime	Behavior
            Singleton : 	One instance per application lifecycle e.g. file logger ,exception logger
            Scoped: 	One instance per HTTP request e.g. all ourservieces
            Transient :	New instance each time e.g. payment gateway, don't share
- scopes-> real life examples where do u use them
- viewdata , viewbag, tempdata
- clean architecture , web api 
- REST API VS WEB API, how can we do Routing ,
- Do you know how Migration is done tell me commands 
- Authentication vs authorization 
- react ?, hooks?, useEffect 3 questions? , props vs state - 4 to 5 Questions,  How will you apply authentication in react js ?
- function vs stored procedure, joins, views, cte, cursor ,triggers - after/instead,
- How do you use git for conflicts, How will you create/manage manage your repository- module wise, timewise, member wise? 
- In your project how you created branches ? - 
- what do you know about docker kubernates? have u used them in project ? 
- what experience do you have in azure? 
- Have you ever deployed app on IIS server yourself ? -> No but told him procedure -> publish , add this code to iis server on iis.
- what is solid principles
-----------------------------------     Rohit sir interview Questions       -------------------------
------------------------------------------------ Company 1 ----------------------------------------------------
hooks ?                                                     
custom hooks ?                                               
what is context api?                                        
diff between context api and redux toolkit?
how to call api using in react js ?                         
controlled and uncontrolled components? 

.net vs .net core --> platform independent, built in dependency injection?
what is dependency injection? 
do you know design patterns ? 
how garbage collection in .net works ? -- gc.Collect, IDisposable interface- dispose method

 methods we use in .net for authentications ? packages, how works 


----------------------------------------------- Company 2 --------------------------------------------------------
which .net core version u have used ? what are new features in it ? 
what is DI?
service lifetime? singleton, transient, addscoped
example of return types ? IActionResult vs ActionResult, viewResult,....etc
what are middlewares ? how do u use them ?
do you know about cors? How do you use them?
how can we secure out web api request? 2 ways authentication and authorisation
also explain how you have used jwt in your project

Do you know about microservices? and kahitari vichitra question  -> what is serverless architecture in microservices ? 

so rohit sir said that I have completed assignments on microservices because I have to implement in one project of our company.
So can i explain microservices

how do you manage services in downtime .? 
what is scaling  vs Load balancing?
who are your user? 
code first and db first ? code first cha advtage?


============================================ SQL server  ==========================================================
1. How do we optimise the query? which steps to follow or which things need to be taken care of ?
2. when to use table variable  in stored procedure vs temp table

==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
                    ====================== Plain react interview Theory ===========================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
1. What is react ?

2. what is diff between - class and functional component ?

3. What are hooks in react ? 
- can we use them in class components ? 
- what is the need of the hooks ?
- give me some examples of hooks ? 
- can we have custom hooks? 
- how to create custom hooks or why do we need to create a custom hook?

4. useState() : 
- what is state ?  how state is managed in react js ?
- if we just declare variables without using useState - what will happen? why they don't work?
  Ans: React functional components -- state is designed such way that whenever state changes component re - renders but when we 
  just use variable to store state it does not re-renders component -- do updated value don't reflect on ui.
- in useState can we use just a string to initialise it or other data type also ?
- state vs prop 
  State -> state change-yes -> cause re-rendering,parent comp,mutable, pass to child thr' props
  Props -> prop immutable -> changes - not, if change in parent state cause re-render of child
- if we need to communicate from child to parent we use call back functions(function which pass function as argument)

5. useEffect() : - Logical use: life cycle && handle sideEffects -> structure: callback function and dependency array
----------------------------  logical use ----------------------------------------------------------------------
- what is useEffect ?
== LifeCycle: 
- what is life cycle?
- how life cycle handled in class component 3 methods? - didmount, didupdate , WillUnmount()
- how its done in functional component?
- can you mention three stages of component life cycle using useEffect in functional component in useEffect hook?
        Ans : React components go through a lifecycle of mounting, updating, and unmounting. This concept is more explicit in class components but still exists in functional components via hooks like useEffect.

        Phase	        Description
        Mounting	Component is created and added to DOM
        Updating	Component re-renders due to props/state change
        Unmounting	Component is removed from DOM

== Side Effects 
- what are the side effects in useEffect? 
ans: Component has one purpose to manage state and show  ui other than this all are side effects like 
"The useEffect hook in React is used to manage side effects in functional components. Side effects are 
 operations that interact with the outside world, such as data fetching, DOM manipulation, or setting up subscriptions. 
   1. Data Fetching: Making API calls to retrieve data from a server.
   2. DOM Manipulation: Directly modifying the Document Object Model, such as changing the title of a page.
   3. Timers: Setting up and clearing timers, such as setTimeout or setInterval.
   4. Subscriptions: Establishing subscriptions to external data sources or event listeners.
   5. Logging: Writing to the console or other logging services.
   6. State Updates: Modifying state that triggers re-renders, such as updating context, Redux state, or local component state. 
   7. Local Storage: Interacting with browser local storage to persist data."
== structure 
- tell me about useEffect? how its structure is ? 
"The useEffect hook takes two arguments: a callback function and an optional dependency array.
The callback function contains the side effect logic, and the dependency array controls when the effect runs."
- write useEffect ? 
        a. simple useEffect                                      => useEffect();
        b. with just call back function                          => useEffect(()=> {});
        c. useEffect with call back fuction and dependency array => useEffect(()=> {},[]);
- what is significance of dependency array ? 
        Ans- it controls page rendering 
        a. useEffect with just call back function       => useEffect(()=> {});         --- re-renders/refresh page on every state change
        b. useEffect with empty dependency array        => useEffect(()=> {},[]);      --- refresh page only once when component mounted
        c. useEffect with values in dependency arrat    => useEffect(()=> {},[v1,v2]); --- whenever values of v1/v2 changes page 

6. misc hooks - useRef(), useMemo(), 
    useRef() - why do we use ? what is its significance - even if state change page don't refresh for ref hook variable

7. Session,cookies and local storage     
8. diff between map, filter, foreach loop ? which one of them really alters the state of object?
9. Global State Management: - context api vs redux api
- What is Context API ? diff between context api vs redux toolkit? 
- what is redux toolkit ? what is primary purpose?
- what are the hooks in redux- toolkit? 
- what is react-redux? what are hooks in react- redux?
- what is diff between react-redux and redux toolkit?

10. Controlled and uncontrolled component
The difference between controlled and uncontrolled components in React lies in how form data is handled.

✅ Summary Table
Feature	Controlled Component	Uncontrolled Component
Data Source	React state (useState)	DOM (ref)
Input Updates	Via onChange handler	Via the DOM (e.g., user types)
Value Access	Stored in React state	Accessed using ref
More Suitable For	Validation, dynamic forms, real-time updates	Simple forms, quick inputs, migration from non-React apps
Example Usage	<input value={value} onChange={handleChange} />	<input ref={inputRef} />

🧠 Think of It Like This:
Controlled: React is the boss. It controls the value of the form input.

Uncontrolled: The DOM is the boss. React just observes when needed.

✅ Controlled Component Example
========================================================================================
import { useState } from 'react';

function ControlledInput() {
  const [name, setName] = useState('');

  return (
    <div>
      <input 
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)} 
      />
      <p>Your name: {name}</p>
    </div>
  );
}
=======================================================================================
✅ Here, React controls the input value via useState. Every keystroke updates state.

✅ Uncontrolled Component Example
=======================================================================
import { useRef } from 'react';

function UncontrolledInput() {
  const nameRef = useRef();

  const handleSubmit = () => {
    alert(`Your name is: ${nameRef.current.value}`);
  };

  return (
    <div>
      <input type="text" ref={nameRef} />
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
}
===========================================================================
✅ Here, the input is not tied to React state. We read the value directly from the DOM using ref.

✅ When to Use What?
Use Case	                        Recommended Type
Real-time validation	                Controlled
Prefilling and editing forms	        Controlled
Quick forms with minimal logic	        Uncontrolled
Integrating with non-React libraries	Uncontrolled




==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
                                ====================== Javascript ======================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
-> Diff between let, var ,const?
-> what is scope of let , var, const?
-> diff between map, filter, foreach loop ? 



==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
                                ====================== SQL Server ======================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
