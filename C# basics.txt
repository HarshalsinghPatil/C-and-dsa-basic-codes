
======================================================================================================================
B2B : Back 2 basics => It is made as comprehensive not to be beginner friendly
======================================================================================================================
# Variables
=============
Variable Types: C# is a statically typed language, so you must declare the type of variable
 (e.g., int, string, double, etc.) before using it.
Naming Conventions: Variable names should be meaningful and follow C# naming conventions 
(e.g., camelCase for local variables).
Scope: The scope of a variable is defined by where it is declared. Variables can be declared
 at class level (fields) or inside methods (local variables).


- Datatypes 
================
    - f - for float eg. myFloat = 1.2345f (range 10^-45)
    - for double eg. No need to write any suffix (range 10 ^ -340)
    - m - for decimal eg. myDecimal = 1.2345m(range 10^-28)

Loop: 
=====
- we use for loop when we know there are fix number of iterations. Also while using loop initialize 
the variable inside of the loop otherwise it will 	cause the infinite loop.

Try-catch-finally:
==================
- finally statement is always run/executed (whether we execute try block with no exception or with exception).
But finally will not run if exception is unhandled e.g.	
	- if we catch exception then finally will get executed
	- if we handle specific exception and we got the different exception at the
     runtime then our code will be exited and finally will not be executed
	 e.g. 
	 we used catch block to handle the arithmetic exception but at runtime 
	 runtime we got null exception then our program will be terminated without
	 executing finally block.

======================================================================================================================================
-> Initialization and defination of variables 
======================================================================================================================================

using System;

class Program
{
    static void Main()
    {
        //Saperate declaration and defination
        double height;
        height = 5.5; 

	    // Declaration and Initialization at same time 
        int age = 25;
        string name = "Harshal";


        // Output the values (i.e. print on console)
        Console.WriteLine($"My name is {name} \n height is {height} \n age is {age}");
    }
}

======================================================================================================================
=> Diff ways to write  console.writeLine 
======================================================================================================================
using System;

class Program {
    
     public static void Main(String[] args){

        //========= way 0 : just write string inside double quotes=====
        Console.WriteLine("Hello Harshal"); 

        //========= way 1 : using co-ordinates 0,1,2 etc ============
        int a = 1;
        int b = 2;
        Console.WriteLine("Values of a is  {0} and b is {1}",a,b);

        //======== way 2 : by string concatenation  ===================
        string name = "Harshal";
        Console.WriteLine("My name is :"+ name );
        
        //======== way 3: using $ before string =================
        string msg = "I am harshal";
        Console.WriteLine($"Hello, {msg}");  

     }
}

=====================================================================================================================================
                                     # CLASS #
======================================================================================================================================
Calling function in same class : 
--------------------------------
    we can do it in two ways ->
	1. Create an object and then using that object call the method
	2. Static Method 
======================================================================================================================================
using System;

class Program {
    
    public void function1()
    {
        Console.WriteLine("This function is called in same class with class object");
    }

    public static void function2()
    {
        Console.WriteLine("This is static function called within same class without object" );
    }

    public static void Main(String[] args)
    {
        Console.WriteLine("Two way to call function in same class");

        //=========== way 1 : using object of class================

        Program pg = new Program();
        pg.function1();

        //=========== way 2 :  make function static ================
        function2();

    }
}

======================================================================================================================================

--------------------------------------------------------------------------------------------------------------------------------------
# function
--------------------------------------------------------------------------------------------------------------------------------------

===================================================================================================================
function 
- with passing no parameters and with passing parameters 
- With return type
===================================================================================================================

using System;

class Program {
    
   //================ No retun type ========================= 
    void Show1(){
        Console.WriteLine("Non parameter funtion called");
    }

    //parameterised function 
    void Show2(int a, int b){
        Console.WriteLine("Values passed {0} and {1}",a,b);
    }
    

    //================ with return type ===================    
    string Show3(string msg){
        Console.WriteLine("msg is :"+ msg);
        return msg;
    }
    
     public static void Main(String[] args){
        
        Program pg = new Program();

        pg.Show1();
        pg.Show2(1,2);


        string msg = pg.Show3("I am harshal");
        Console.WriteLine($"Hello, {msg}");       
     }
}

===================================================================================================================
function parameters passed by -
1. Pass by value : Don't change original value
-----------------
2. Pass by ref : changes actual value like pointers 
----------------
3."out" Parameter : 
-------------------
	     - reference-type, not require to initialize variable before passing
	     - We must use out keyword to pass argument as out-type
	     - It is useful when we want a function to return multiple values.

===================================================================================================================


using System;

public class Program
{
        //========= 1. Pass by value  ===========================
        void Show4(int val)
        {
            val *= val;  
            Console.WriteLine("Value inside the show4 function "+val);  
        }

        //========= 2. Pass by ref ===========================
        public void Show5(ref int val)  
        {  
                val *= val;  
                Console.WriteLine("Value inside the show5 function "+val);  
            
        }

	    //============ 3.1 How to use out variable =================
    	public void Show6(out int val)  
    	{  
            int square = 5;  
            val = square;  
            val *= val; // Manipulating value  
    	} 

    	
	    //==== 3.2 How to return multiple values using out parameter ===========
        public void Show7 (out int a, out int b) 
        {  
            int square = 5;  
            a = square;  
            b = square;  
            // Manipulating value  
            a *= a;   
            b *= b;  
        }  
    
    public static void Main(string[] args) 
    {
         Program pg = new Program();
         
	    int val = 50;  
        
         //========= 1. Pass by value  ===========================
	    
	        Console.WriteLine("Value before calling the show4 "+val);  

            pg.Show4(val); // Calling Function by passing value      

            Console.WriteLine("Value after calling the show4 " + val); //value doesn't change 
 
         //========= 2. Pass by ref ===========================

            Console.WriteLine("Value before calling the show5 "+val);

            pg.Show5(ref val); // Calling Function by passing reference            

            Console.WriteLine("Value after calling the show5 " + val);// value changes  

	    //============ 3. Using out variable =================

	    //============ 3.1 How to use out variable =================

            Console.WriteLine("Value before passing out variable " + val); 
            
            pg.Show6(out val);   

            Console.WriteLine("Value after recieving the out variable " + val); 

	    //============ 3.2 How to return multiple values using out parameter =================
            int val2 = 50, val3 = 100;  

            Console.WriteLine("Value before passing out var\n val1 = " + val2+" \n val2 = "+val3);  

            pg.Show7(out val2, out val3); 

            Console.WriteLine("Value after passing out var \n val1 = " + val2 + " \n val2 = " + val3);   
	    
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------
================================================== # Arrays #===============================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------
C# Arrays
-------------
- Like other programming languages, array in C# is a group of similar types of elements 
that have contiguous memory location. We can store only fixed set of elements in C# array. 
- In C#, array is an object of base type System.Array. 
- In C#, array index starts from 0.

    Lets below discuss the array signature , how to initialise the array , and important 
    array methods and properties which are important to use the arrays.

        C# Array class Signature:
        ----------------------------
        [SerializableAttribute]  
        [ComVisibleAttribute(true)]  
        public abstract class Array : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable 


C# Array Types
---------------
There are 3 types of arrays in C# programming:
    1. Single Dimensional Array
    2. Multidimensional Array
    3. Jagged Array

1. C# Single Dimensional Array : 
--------------------------------
put square bracket after datatype like below :

    1.a> Saperately declare and assign size
    ----------------------------------------------
        int[] myArray;
        myArray = new int[5]; // Definition with a size of 5

    1.b> Declaration and assign size at same time
    -------------------------------------------------
        int[] myArray = new int[5]; // Creates an array of integers with a size of 5

2. Inline Initialization
----------------------------------
        //2.a> Initializes with specific values without specifying size
        ----------------------------------------------------------------
        int[] myArray = new int[] { 1, 2, 3, 4, 5 }; 

        //2.b> Also we can omit the new int[] part: Shorter syntax for inline initialization
        -------------------------------------------------------------------------------------
        int[] myArray = { 1, 2, 3, 4, 5 }; 

3. Implicitly Typed Array
----------------------------------
        var myArray = new[] { 1, 2, 3, 4, 5 }; // Compiler infers the type (int array)

        // How to write array (printing array next program)
        class Array 
        {
            public static void Main(string [] args)
            {
                // Declare and assign size saperately
                int[] myArray;
                myArray = new int[5];
                Console.WriteLine("Length of Array: " + myArray.Length);
                Console.WriteLine("Size is fixed? " + myArray.IsFixedSize);
                
                // Declare and initialise array
                int[] myArray1 = new int[] { 1, 2, 3, 4, 5 };
                Console.WriteLine("Size of array: "+ myArray1.Length);
                Console.WriteLine("Size is fixed? " + myArray1.IsFixedSize);

                // Implicitly typed array
                var myArray2 = new[] {"one", "two", "three"};
                Console.WriteLine("Size of array: "+ myArray2.Length);
                
            }
        }
          
        Properties of the Arrays:
        ------------------------
		1. Length (i.e. size of array) 
		2. IsFixedSize(kim: The size of array is always fixed but this property usefull for other data structures) 
		3. Rank(i.e. Dimension of array 2D,3D)

            Note: this are not only used for array but also for other collections/data structures.

        Some useful Methods of Array:
        ------------------------------ 
        1. Copy(Array,Array,Int32)
        2. IndexOf(Array,Object)
        3. Reverse(Array)
        4. Sort(Array)
        5. ToString()

============> Main Questioh here is how to initialise these arrays ? ========================

        1. Assign Values Individually by Index
        ------------------------------------------
        Assign values to each element using its index (0-based):

        myArray[0] = 10;
        myArray[1] = 20;
        myArray[2] = 30;
        myArray[3] = 40;
        myArray[4] = 50;

        2. Use a Loop to Assign Values
        -------------------------------
        Use a loop (e.g., for, while, or foreach) to assign values programmatically:

        for (int i = 0; i < myArray.Length; i++)
        {
            myArray[i] = i * 10; // Example: assigns 0, 10, 20, 30, 40
        }

        3. Assign Values Using Array Initialization
        -------------------------------------------
        Reassign the array with a new set of values using inline initialization:

        myArray = new int[] { 1, 2, 3, 4, 5 }; // Reassigns the array with new values

        4. Use Array.Copy or Array.CopyTo
        ----------------------------------
        4.1> Copy values from another array into myArray:
        ==================================================
        // Copies values from sourceArray to myArray
        int[] sourceArray = { 5, 10, 15, 20, 25 };
        Array.Copy(sourceArray, myArray, sourceArray.Length); 

        4.2> Alternatively, using CopyTo:
        ==================================
        // Copies values from sourceArray to myArray starting at index 0
        sourceArray.CopyTo(myArray, 0); 


        5. Use Array.Fill (C# 8.0 and later)
        -----------------------------------------
        Fill the entire array with a specific value:

        Array.Fill(myArray, 7); // Fills the array with the value 7: [7, 7, 7, 7, 7]

        6.Use LINQ to Assign Values
        -------------------------------
        Use LINQ methods to generate or manipulate values for the array:

        using System.Linq;

        myArray = Enumerable.Range(1, 5).ToArray(); // Assigns [1, 2, 3, 4, 5]

        7. Use Array.Clear to Reset Values
        -----------------------------------
        Reset all values in the array to their default (0 for int):

        Array.Clear(myArray, 0, myArray.Length); // Resets all elements to 0

        8. Use Buffer.BlockCopy for Byte-Level Copying
        ------------------------------------------------
        If working with arrays of primitive types (e.g., int), use Buffer.BlockCopy to copy values from another array:

        int[] sourceArray = { 100, 200, 300, 400, 500 };
        Buffer.BlockCopy(sourceArray, 0, myArray, 0, sourceArray.Length * sizeof(int));
=============================================================================================================

==================== Array declaration assigning the values ===================
        class Program {
        public static void Main(string[] args)
        {
            ====  way 1 : declare and assign values saperately
                    int[] myArr ;    
                    myArr = new int[5];
                
                    
                    Console.WriteLine("Size of array 1 : "+ myArr.Length);
                
                    myArr[0] = 10;
                    myArr[1] =  20;
                    myArr[2] = 30;
                    myArr[3] = 40;
                    myArr[4] = 50;
                    
                    int count = 0;

                    for(int i = 0 ; i< myArr.Length; i++)
                    {
                        int num = myArr[i];
                        
                        Console.WriteLine($"Value at index [{count}] is : " + num );
                        ++count;
                    }

        ========================== OOOOOOOOOOORRRRRRRRRRRRRRRR ====================================

                    // way 2.1 : same time declare and define them below both methods are ok 
                    i.e.with giving size of array and second one without array size
                    
                    int[] arr = new int[5] {1,2,3,4,5};//with size
                    int[] arr = new int[] {1,2,3,4,5};

                    //way 2.2 : first declare and then define 
                    int[] arr ;
                    arr = new int[] {1,2,3,4,5};

                    //=== With foreach Loop =======
                    int index = 0;
                    foreach (int val in arr)
                    {
                        Console.WriteLine($"The element at arr[{index}] : is {val}");
                        index++;
                    }
                    
                    //=== With simple for =======
                    index = 0;
                    for(int i = 0; i<arr.Length ; i++)
                    {
                        int val = arr[i];
                        Console.WriteLine($"The element at arr[{index}] : is {val}");
                        index++;
                    }

    		}
	}


    using System;

    public class Program
    {
        
        //here you can't call method in same class without using static keyword
        static void printArray(int[] arr)
        {  
            Console.WriteLine("Elements in this array are : ");
            for(int i= 0 ; i<arr.Length; i++)
            {
                Console.WriteLine(arr[i]);
            }
        }

        //Kim : here arr.Length is property and not method don't use the round bracket here
        static void maxValueInArray(int[] arr)
        {
            int max = arr[0];
            
            for(int i = 0; i< arr.Length; i++)
            {
                if(max<arr[i])
                {
                    max = arr[i];
                }
            }
            
            Console.WriteLine("The max number here is :" + max);
        }
        
        static void minValueInArray(int[] arr)
        {
            int min = arr[0];
            
            for( int i = 0 ; i< arr.Length ; i++)
            {
                if(min> arr[i])
                {
                    min = arr[i];
                }
            }
            
            Console.WriteLine("The min number here is :" + min);
            
        }
        
        public static void Main(string[] args)
        {
            int[] arr1 = {25, 10, 20, 15, 40, 50};
            int[] arr2 = {12, 23, 44, 11, 54 };
            
            printArray(arr1);
            printArray(arr2);
            
            minValueInArray(arr1);
            minValueInArray(arr2);

            maxValueInArray(arr1);
            maxValueInArray(arr2);
            
        }
    }


# Multi-dimensional Array :
------------------------------
To create multidimensional array, we need to use comma inside the square brackets like below 

int[,] arr=new int[3,3];//declaration of 2D array  
int[,,] arr=new int[3,3,3];//declaration of 3D array 

2D Array:
----------

class Program {
	public static void Main(string [] args)
	{
		int[,] arr = new int[3,3];
		
		arr[0,1] = 10;
		arr[1,2] = 20;
		arr[2,0] = 30;

		for(int i = 0 ; i<3 ; i++)
		{
			for(int j= 0; j<3 ; j++)
			{
				Console.Write(arr[i,j]+ "\t" );
			}
			Console.WriteLine( );
		}
	}
}

3D Array:
----------
using System;

public class Program
{
    public static void Main()
    {
        // Define and initialize a 3D array
        int[,,] arr = new int[2, 3, 4]
        {
            {
                { 1, 2, 3, 4 },
                { 5, 6, 7, 8 },
                { 9, 10, 11, 12 }
            },
            {
                { 13, 14, 15, 16 },
                { 17, 18, 19, 20 },
                { 21, 22, 23, 24 }
            }
        };

        // Iterate over the 3D array and print its elements
        for (int i = 0; i < arr.GetLength(0); i++) //first dimension (depth)
        {
            Console.WriteLine($"Layer {i}:");
            for (int j = 0; j < arr.GetLength(1); j++) // second dimension (rows)
            {
                for (int k = 0; k < arr.GetLength(2); k++) 
                {
                    Console.Write(arr[i, j, k] + "\t"); 
                }
                Console.WriteLine(); // Move to the next line after each row
            }
            Console.WriteLine(); 
        }
    }
}



C# Jagged Arrays
-------------------

In C#, jagged array is also known as "array of arrays" because its elements are arrays. The element size of jagged array can be different.

Declaration of Jagged array :-
---------------------------
Let's see an example to declare jagged array that has two elements.
int[][] arr = new int[2][]; 

 
Initialization of Jagged array
----------------------------------
Let's see an example to initialize jagged array. The size of elements can be different.
arr[0] = new int[4];  
arr[1] = new int[6];  

Initialization and filling elements in Jagged array
---------------------------------------------------------
Let's see an example to initialize and fill elements in jagged array
arr[0] = new int[4] { 11, 21, 56, 78 };         
arr[1] = new int[6] { 42, 61, 37, 41, 59, 63 };  

Here, size of elements in jagged array is optional. So, you can write above code as given below:
arr[0] = new int[] { 11, 21, 56, 78 };         
arr[1] = new int[] { 42, 61, 37, 41, 59, 63 };  


public class HelloWorld
{
    public static void Main(string[] args)
    {
        int[][] arr = new int[2][];
        arr[0] = new int[] {1,2,3,4,5,6};
        arr[1] =  new int[] {7,5,9,8,1,4};
        
        for(int i = 0; i<arr.Length; i++) 
        {
            for(int j = 0; j< arr[i].Length; j++)
            {
                Console.Write(arr[i][j] + "\t");
            }
            Console.WriteLine();
        }
    }
}


    #  Params
    ------------
    - used to specify a parameter that takes variable number of arguments
    - useful when we don't know the number of arguments prior
    - one params keyword is allowed & no additional parameter is permitted after
     params keyword in a function declaration

    class Program {
    
            public static void PassMultipleValues (params object[] items)
            {
                for (int i = 0; i < items.Length; i++)  
                {  
                    Console.WriteLine(items[i]);  
                } 
            }
            
            public static void Main(String [] args)
            {
                PassMultipleValues("harshal", 100, "Ramakrishnan Ayyer","Ramesh",101, 20.50,"Peter", 'A');
                
            }
    }


====================================================================================================
                        Strings 
====================================================================================================

C# Strings
--------------
In C#, string is an object of System.String class that represent sequence of characters. We can 
perform many operations on strings such as concatenation, comparision, getting substring, search,
 trim, replacement etc.

string vs String
------------------
In C#, string is keyword which is an alias for System.String class. That is why string and String
 are equivalent. We are free to use any naming convention.













====================================================================================================
                                Object oriented programming
====================================================================================================
- Note you can't declare class in a private namespace  

- Basic example of a class 

public class Employee {
    public int Id ;
    public string Name ;
    public double salary;
    
    public void Insert (int i , string n, double s)
    {
        Id = i;
        Name = n;
        salary = s;
    }
    
    public void Display()
    {
        Console.WriteLine(Id+" "+Name+""+salary);
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e1 = new Employee();
       Employee e2 = new Employee();
    
        e1.Insert(1, "name 1", 10000.23);// call methods using objects
        e2.Insert(2, "name 2", 10000.65);
        
        e1.Display();
        e2.Display();
    }
}

--------constructor(parameterised and non-parameterised) ----------

public class Employee {
    public int Id ;
    public string Name ;
    public double salary;

    public Employee()
    {
        Console.WriteLine("Default constructor invoked ");
    }
    
    //Constructor do not require a return type
    public Employee (int i , string n, double s); //Parameterised
    {
        Id = i;
        Name = n;
        salary = s;
    }

    Note : here if parameter names and class properties have same name 
    then we use "this" keyword.

    ~Employee()
    {  
            Console.WriteLine("Destructor Invoked");  
    } 
    
    public void Display()
    {
        Console.WriteLine(Id+" "+Name+
        ""+salary);
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e0 = new Employee();
       Employee e1 = new Employee(1, "name 1", 10000.23);
       Employee e2 = new Employee(2, "name 2", 10000.65);
        
        e1.Display();
        e2.Display();
    }
}

# Static Constructor: 
----------------------
- while creating object/instance Static constructor called only once 
and that is when the class is load for the first time.
- It is used to initialize the static fields of the class.
- No matter how many objects of class are created but static contructor
called only once.

using System;
public class Employee {
    public int Id ;
    public string Name ;
    public double salary;

    static Employee()//kim : we can't apply "public" to static modifier
    {
        Console.WriteLine("Static constructor invoked ");
    } 

    public Employee()
    {
        Console.WriteLine("Default constructor invoked ");
    }
    
    
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e0 = new Employee();
       Employee e1 = new Employee();
       Employee e2 = new Employee();
    }
}

========================== copy Contructor ==================================

If we want to copy the object of same class when we want to use the same instance 
everytime e.g. instance e1 in below case can be s

//copy contructor
public class Employee {
    public int Id ;
    public string Name;
    
    public Employee(int i , string n)
    {
        Id = i;
        Name = n;
        Console.WriteLine($" PC : Id and Name is : {Id} and {Name} ");
    }
    
    public Employee(Employee e){
        Id = e.Id;
        Name = e.Name ;
        Console.WriteLine($"CC : Id and Name is : {Id} and {Name} ");
        
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
        Employee e1 = new Employee(1, "n1");
        Employee e2 = new Employee(e1);
    }
}

====================================================================================================


Q. why destructors are not needed in c# ?
=> destructors are not required in C#. The .NET garbage collector effectively
 manages memory, and the IDisposable interface provides a more controlled way
 to release unmanaged resources when necessary. Destructors should be used 
 sparingly and only when working with unmanaged resources that need to be 
 released explicitly.


Boxing and unboxing
----------------------
⚫ Boxing : Value type is converted to object type

 	object obj;
 	obj = 100; // this is boxing

⚫ Unboxing : Object type is converted to a value type

	int i = 123;
	object obj = i; //boxing
	int j = (int)obj; //unboxing

------------------------------
Types of Method Parameters 
------------------------------
- optional parameters : we give default values if user don't provide anything e.g. body temp = 37.
- Named and positional parameters : if we keep field(i.e. variable) name same then we don't need
to keep the sequence of arguments and parameters same . 
- params


STATIC 
-----------
1. Static field : 
- instance field which gets memory each time whenever you create object But if we are using 
same varible field at 100 places then its better to make it static so that it's copy get 
shared among all
-there is only one copy of static field created in the memory. It is shared to all the objects.
e.g. we can have multiple Accounts but it should have same rateOfInterest.Then we will declare 
it static.

using System;  
   public class Account  
    {  
        public int accno;   
        public String name;  
        public static float rateOfInterest=8.8f; 

        public Account(int accno, String name)  
        {  
            this.accno = accno;  
            this.name = name;  
        }  
          
        public void display()  
        {  
            Console.WriteLine(accno + " " + name + " " + rateOfInterest);  
        }  
   }  
   class TestAccount{  
       public static void Main(string[] args)  
        {  
            Account a1 = new Account(101, "Sonoo");  
            Account a2 = new Account(102, "Mahesh");  
            a1.display();  
            a2.display(); 

            Warning: But remember if you change value of static field then it will be changed 
            for all the fields 
              Account.rateOfInterest = 10.5f;//changing value   

            Account a3 = new Account(103, "Sonoo");  
            Account a4 = new Account(104, "Mahesh"); 
  
        }  
    } 


C# static class :
=================
Points to remember for C# static class
- C# static class contains only static members.
- C# static class cannot be instantiated.
- C# static class is sealed.
- C# static class cannot contain instance constructors.



Static Class in C#
A static class is a class that cannot be instantiated. It can only contain static members,
 which means all fields, methods, and properties of the class must also be static. Static
 classes are useful when you want to create utility classes that provide a collection of 
methods or constants without maintaining any state or instance data.

Rules for Static Classes
------------------------------
- No Instance Members: A static class cannot contain instance members like 
  non-static fields,properties, or methods.
- No Object Instantiation: You cannot create an object of a static class using the 
  new keyword.
- Static Constructor:
	- Static classes can have a static constructor. 
	- The static constructor is parameterless.
- Cannot have an access modifier (e.g., public, private).
- Is called automatically once, before any static member is accessed or any static method is called.   
- Static Fields: All fields in a static class must be static.
- Static Methods and Properties: All methods and properties in a static class mustbe static.   
- Inheritance: A static class cannot inherit from other classes, nor can it be inherited by any other class
    

public static class MathUtility
{
    // Static field
    private static int calculationCount = 0;

    // Static constructor
    static MathUtility()
    {
        Console.WriteLine("Static constructor of MathUtility invoked.");
    }

    // Static property
    public static int CalculationCount
    {
        get { return calculationCount; }
    }

    // Static method
    public static double Add(double a, double b)
    {
        calculationCount++;
        return a + b;
    }

    // Another static method
    public static double Multiply(double a, double b)
    {
        calculationCount++;
        return a * b;
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
        // Accessing static methods
        double sum = MathUtility.Add(3.5, 2.5); // Allowed
        double product = MathUtility.Multiply(4, 5); // Allowed

        // Accessing static property
        Console.WriteLine("Calculation count: " + MathUtility.CalculationCount); // Allowed
        
        // Cannot instantiate a static class
        // MathUtility mathUtility = new MathUtility(); // Not Allowed (Compile-time error)
    }
}

C# Properties
=================
	C# Properites doesn't have storage location. C# Properites are extension of fields 
and accessed like fields.

The Properties have accessors that are used to set, get or compute their values.

Usage of C# Properties
-----------------------
	- C# Properties can be read-only or write-only.
	- We can have logic while setting values in the C# Properties.
	- We make fields of the class private, so that fields can't be accessed from outside 
the class directly.
	- Now we are forced to use C# properties for setting or getting values.


using System;  
   public class Employee  
    {  
        private string name;  
  
        public string Name  
        {  
            get  
            {  
                return name;  
            }  
            set  
            {  
                name = value;  
            }  
        }  
   }  
   class TestEmployee{  
       public static void Main(string[] args)  
        {  
            Employee e1 = new Employee();  
            e1.Name = "Sonoo Jaiswal";  
            Console.WriteLine("Employee Name: " + e1.Name);  
        }  
    }  


======================================================================================================

using System;  
   public class Animal  
   {  
       public void eat() { Console.WriteLine("Eating..."); }  
   }  

   public class Dog: Animal  
   {  
       public void bark() { Console.WriteLine("Barking..."); }  
   }  

   class TestInheritance2{  
       public static void Main(string[] args)  
        {  
            Dog d1 = new Dog();  
            d1.eat();  
            d1.bark();  
        }  
    }  

==============================================================================================================================
					                                # SOLID PRINCIPLES #
==============================================================================================================================
Single Responsibility Principle (SRP) of the SOLID principles in C# using an example involving Animal, Bird, and Dog.

What is the Single Responsibility Principle (SRP)?
The SRP states that a class should have only one reason to change, meaning it should have only one responsibility. If a class has 
multiple responsibilities, it becomes harder to maintain, test, and understand.

Example: Animal, Bird, and Dog
Let’s say we have a base class Animal and two derived classes Bird and Dog. Each class should have a single responsibility.

------------------------------------ Violation of SRP : WRONG CODE --------------------------------------------------------
Here’s an example where SRP is violated:

class Animal
{
    public string Name { get; set; }

    public void Eat()
    {
        Console.WriteLine($"{Name} is eating.");
    }

    public void Fly()
    {
        Console.WriteLine($"{Name} is flying.");
    }

    public void Bark()
    {
        Console.WriteLine($"{Name} is barking.");
    }
}
-----------------------------------------------------------------------------------------------------------------------------------
Problems with this design:

The Animal class has multiple responsibilities: eating, flying, and barking.

Not all animals can fly or bark. For example, a Dog cannot fly, and a Bird cannot bark.

If we need to change the behavior of flying or barking, we have to modify the Animal class, which violates SRP.

Refactoring to Follow SRP
To adhere to SRP, we should split the responsibilities into separate classes.

-------------------------------------------- Right code ----------------------------------------
// Base class with a single responsibility
class Animal
{
    public string Name { get; set; }

    public void Eat()
    {
        Console.WriteLine($"{Name} is eating.");
    }
}

// Derived class for Birds with flying responsibility
class Bird : Animal
{
    public void Fly()
    {
        Console.WriteLine($"{Name} is flying.");
    }
}

// Derived class for Dogs with barking responsibility
class Dog : Animal
{
    public void Bark()
    {
        Console.WriteLine($"{Name} is barking.");
    }
}
Usage Example
csharp
Copy
class Program
{
    static void Main(string[] args)
    {
        Bird sparrow = new Bird { Name = "Sparrow" };
        sparrow.Eat(); // Sparrow is eating.
        sparrow.Fly(); // Sparrow is flying.

        Dog labrador = new Dog { Name = "Labrador" };
        labrador.Eat(); // Labrador is eating.
        labrador.Bark(); // Labrador is barking.
    }
}
-----------------------------------------------------------------------------------------------------------------------------------

Why is this Better?
Single Responsibility: Each class has only one responsibility.

Animal handles eating.

Bird handles flying.

Dog handles barking.

Easier Maintenance: If the behavior of flying or barking needs to change, we only modify the respective class.

Reusability: The Animal class can be reused for other animals without carrying unnecessary responsibilities.

Key Takeaways
SRP ensures that a class has only one reason to change.

Split responsibilities into separate classes to make the code more modular, maintainable, and scalable.

In the example, Animal, Bird, and Dog each have a single responsibility, adhering to SRP.

Let me know if you'd like to explore the other SOLID principles! 😊


=============================================================================================================
					# SOLID PRINCIPLE #(older chat gpt explaination)
=============================================================================================================

==================================== 1. Single Responsibility Principle =============================================
The Single Responsibility Principle (SRP) is one of the five SOLID principles of object-oriented design.
SRP states that a class should have only one reason to change, meaning it should have only one job or 
responsibility.


Example: Animal, Bird, and Dog
Let’s say we have a base class Animal and two derived classes Bird and Dog. Each class should have a single responsibility.

------------------------------------ Violation of SRP : WRONG CODE --------------------------------------------------------
Here’s an example where SRP is violated:

class Animal
{
    public string Name { get; set; }

    public void Eat()
    {
        Console.WriteLine($"{Name} is eating.");
    }

    public void Fly()
    {
        Console.WriteLine($"{Name} is flying.");
    }

    public void Bark()
    {
        Console.WriteLine($"{Name} is barking.");
    }
}
-----------------------------------------------------------------------------------------------------------------------------------


¢ LivingAnimal: This class represents any living animal. Its responsibility might be general

attributes or behaviors that all animals share.

© Bird: This class represents birds and inherits from LivingAnimal. It should have responsibilities

specific to birds.

¢ Dog: This class represents dogs and also inherits from LivingAnimal. It should have

responsibilities specific to dogs.

-------------------------------------------- Right code ----------------------------------------

    public class LivingAnimal
    {
        public string Name { get; set;}

        public int Age { get; set;}

        public void Eat()
        {
            Console .WriteLine($"{Name} is eating.");
        }

        public void Sleep()
        {
            Console .WriteLine($"{Name} is sleeping.");
        }
    }

    public class Bird : LivingAnimal
    {
        public void Fly()
        {
            Console .WriteLine($"{Name} is flying.");
        }

        public void LayEggs()
        {

        Console .WriteLine($"{Name} is laying an egg.");
        }
    }

    public class Dog : LivingAnimal
    {
        public void Bark()
        {
            Console .WriteLine($"{Name} is barking.");
        }

        public void Fetch() 
        {
            Console .WriteLine($"{Name} is laying an egg.");
        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            Bird sparrow = new Bird { Name = "Sparrow" };
            sparrow.Eat(); // Sparrow is eating.
            sparrow.Fly(); // Sparrow is flying.

            Dog labrador = new Dog { Name = "Labrador" };
            labrador.Eat(); // Labrador is eating.
            labrador.Bark(); // Labrador is barking.
        }
    }
-------------------------------------------- Right code ----------------------------------------

Explanation
1. LivingAnimal Class:

- Responsibility: Defines general attributes and behaviors common to all living animals, such
as eating and sleeping.

- Reason to Change: If there are changes in the general behavior or attributes of living
animals.

2. Bird Class:

- Responsibility: Defines behaviors specific to birds, such as flying and laying eggs.

- Reason to Change: If there are changes in behaviors or attributes specific to birds.

3. Dog Class:

- Responsibility: Defines behaviors specific to dogs, such as barking and fetching.
- Reason to Change: If there are changes in behaviors or attributes specific to dogs.

Each class has a single responsibility and therefore a single reason to change. This adheres to the
Single Responsibility Principle, ensuring that our design is modular, maintainable, and easy to
understand.
==================================== 1. Single Responsibility Principle =======================================================



============================================ 2. Open/close Principle ================================================================

with same example explain open close principle

The Open/Closed Principle (OCP) is another of the SOLID principles, stating that software entities
(classes, modules, functions, etc.) should be open for extension but closed for modification. This
means that the behavior of a module can be extended without modifying its source code.

Using the same example of living animals, birds, and dogs, let's illustrate the Open/Closed Principle

Conceptual Explanation
- LivingAnimal: This base class defines common attributes and methods for all animals.

- Bird and Dog: These subclasses extend the behavior of 'LivingAnimal' without modifying the 'LivingAnimal' class itself.


System;

public abstract class LivingAnimal
{
        public string Name { get; set;}

        public int Age { get; set;}

        public void Eat()
        {

            Console .WriteLine($"{Name} is eating.");
        }

        public void Sleep()
        {

            Console .WriteLine($"{Name} is sleeping.");
        }

        public abstract void PerformSpecialAction();
}

public class Bird : LivingAnimal
{

    public override void PerformSpecialAction()
    {
        Fly();
        LayEgg();
    }

    public void Fly()
    {
        Console .WriteLine($"{Name} is flying.");
    }

    public void LayEggs()
    {
        Console .WriteLine($"{Name} is laying an egg.");
    }
}

public class Dog : LivingAnimal
{

    public override void PerformSpecialAction()
    {
        Bark();
        Fetch();
    }

    public void Bark()
    {
        Console .WriteLine($"{Name} is barking.");
    }

    public void Fetch() 
    {
        Console .WriteLine($"{Name} is laying an egg.");
    }
}

public class Program
{
    public static void Main()
    {
        //substitution : use parent class to initialize child class
        LivingAnimal myBird = new Bird() { Name = "Parrot" };
        LivingAnimal myDog = new Dog() { Name = "Rex" };

        //Both instances are treated as LivingAnimal
        MakeAnimalEatAndSleep(myBird) ;
        MakeAnimalEatAndSleep(myDog) ;
    }

    public static void MakeAnimalEatAndSleep(LivingAnimal animal)
    {
        animal.Eat();
        animal.Sleep();
        animal.PerformSpecialAction();
    }
}	


Explanation
1. LivingAnimal Class:

- Methods: `Eat` and `sleep` are common to all animals.

¢ Abstract Method: `performspecialaction` is introduced as an abstract method, allowing
subclasses to implement their specific actions without modifying the base class.

2. Bird Class:

e Extension: Inherits from `LivingAnimal` and implements the `PerformSpecialAction`
method to include behaviors like `Fly` and `LayEgg`.

3. Dog Class:

- Extension: Inherits from `LivingAnimal` and implements the `PerformSpecialAction`
method to include behaviors like `Bark` and `Fetch`.

4. Program Class:
- Demonstrates the Open/Closed Principle by creating instances of `Bird` and `Dog` and treating them as `LivingAnimal`.
- The `MakeAnimalPerformActions` method calls the common methods `Eat` and `Sleep`, as well as the `PerformSpecialAction` method, which is specific to each subclass.

Ensuring OCP

- Extension without Modification: The `LivingAnimal` class is closed for modification because its code does not change when new types of animals are added. Instead, it is extended by creating new subclasses (like `Bird` and `Dog`) that implement or override methods.

- Behavior Extension: New behaviors specific to birds and dogs are added by creating new subclasses, adhering to the Open/Closed Principle. The base class remains unchanged, ensuring stability and reducing the risk of introducing bugs.

By adhering to the Open/Closed Principle, our design allows for easy extension of functionality(adding new types of animals with their specific behaviors) without altering existing code, making the system more maintainable and scalable.

============================================ 2. Open/close Principle ================================================================


=================================== 3. Liscov's substitution principle ===========================================================

Liskov Substitution Principle (LSP)
-------------------------------------

Liskov Substitution Principle (LSP) is another of the SOLID principles, stating that objects of a
superclass should be replaceable with objects of a subclass without affecting the correctness of the
program. In other words, subclasses should be substitutable for their base classes.

Conceptual Explanation:

To demonstrate LSP with living animals, birds, and dogs, we ensure that any instance of a subclass
(e.g., Bird or Dog) can replace an instance of the base class (LivingAnimal) without altering the
desirable properties of the program (correctness, task completion, etc.).

public class LivingAnimal
{
    public string Name { get; set;}

    public int Age { get; set;}

    public virtual void Eat()
    {
        Console .WriteLine($"{Name} is eating.");
    }

    public virtual void Sleep()
    {
        Console .WriteLine($"{Name} is sleeping.");
    }
}

public class Bird : LivingAnimal
{
    public void Fly()
    {
        Console .WriteLine($"{Name} is flying.");
    }

    public void LayEggs()
    {
        Console .WriteLine($"{Name} is laying an egg.");
    }
}

public class Dog : LivingAnimal
{
    public void Bark()
    {
        Console .WriteLine($"{Name} is barking.");
    }
    public void Fetch() 
    {
        Console .WriteLine($"{Name} is laying an egg.");
    }
}

public class Program
{

    public static void Main()
    {
        //substitution : use parent class to initialize child class
        LivingAnimal myBird = new Bird() { Name = "Parrot" };
        LivingAnimal myDog = new Dog() { Name = "Rex" };

        MakeAnimalEatAndSleep(myBird) ;
        MakeAnimalEatAndSleep(myDog) ;
    }

    public static void MakeAnimalEatAndSleep(LivingAnimal animal)
    {
        animal.Eat();

        animal.Sleep();
    }
}	

Explanation
1. LivingAnimal Class:
---------------------
- Methods: `Eat` and `Sleep` are common to all animals and are marked as `virtual` to
allow overriding in subclasses if needed.
2. Bird Class:
----------------
- Inherits from `LivingAnimal`.
- Adds specific methods `F1y` and `LayEgg` which are behaviors specific to birds.

3. Dog Class:
--------------
 Inherits from `LivingAnimal`.
- Adds specific methods `Bark` and `Fetch` which are behaviors specific to dogs.

4. Program Class:
-----------------
- Demonstrates LSP by creating instances of 'Bird’ and `Dog` and treating them as
`LivingAnimal`.

- The `MakeAnimalEatAndSleep` method accepts a `LivingAnimal` object and calls the `Eat`
and `Sleep` methods.
- When `Bird` and `Dog` instances are passed to this method, they behave correctly as
`LivingAnimal` objects, fulfilling LSP.

Ensuring LSP
==============
¢ Correctness: Both `Bird` and `Dog` instances can replace `LivingAnimal` instances without
affecting the program's correctness. They both implement the `Eat` and `Sleep` methods as
expected.

¢ Behavior: Subclasses (`Bird` and `Dog`) do not alter the expected behavior of the base class
(`LivingAnimal`). They extend it with additional functionalities while maintaining the base class's
interface.

By adhering to LSP, our design ensures that subclasses can be used interchangeably with their base
class without introducing errors, making our code more robust and flexible. 

=================================== 3. Liscov's substitution principle ===========================================================







=================================================================================================================================
LINQ 
=================================================================================================================================
1. Arithmetical functions  and Position functions:
--------------------------------------------------
public class HelloWorld
{
    public static void Main(string[] args)
    {
        List<int> list = new List<int> {1,2,3,4,5,6,7,8,9,10};
        var max = list.Max();
        var min = list.Min();
        var Count = list.Count();
        var Sum = list.Sum();
        var avg = list.Average();
        Console.WriteLine("Max: " + max +" Min: " +min +" Count: " +Count +" Sum: " +Sum + "Average: "+ avg);
        int getAvg = Sum/Count;
	Console.WriteLine("Average: " + getAvg);

		//========== Positional =============
		int first = list.First();
		int last = list.Last();
		int secondPosition = list.ElementAt(1);
		Console.WriteLine($"first = {first}, last = {last} , at second position = {secondPosition}");
		//=========== Position or default ====================
		=> here FirstOrDefault, LastOrDefault,ElementAtOrDefault, SingleOrDefault()
		int firstOrDefault = numbers.FirstOrDefault();
		Console.WriteLine("FirstOrDefault: " + firstOrDefault); // Output: FirstOrDefault: 1 and if array is empty o/p will be Default(0)

		SingleOrDefault()=> //Single: the dataset must have only one element or else it give exception. 

----------------------------------------------------------------------
Partition operator (take/skip first 100 or give letter start with "u"
----------------------------------------------------------------------
string[] countries = {  "US", "UK", "India", "Russia", "China", "Australia", "Argentina" };

//Take first 3 countries =>  IEnumerable<string> result = countries.Take(3); 
 
// Skip 3 countries => IEnumerable<string> result = countries.Skip(3);             
		
// Take countries starting with "u" => IEnumerable<string> result = countries.TakeWhile(x => x.StartsWith("U"));
		      

		
		    


				
    }
}
============================ Data storage structure of operations like searching , sorting , filtering ===============================
Summary of Significance and Usage:
=======================================================================================================================================
Type	   |  Significance	                        | Usage Need
=======================================================================================================================================
Array	   |  Fixed-size, efficient access by index.	| When you have a known, unchanging number of elements.
=======================================================================================================================================
List	   |  Dynamic-size, provides methods to add,    | When the number of elements can change and you need list-specific operations.
           |  remove, and manipulate elements.	        |
=======================================================================================================================================
Dictionary | Key-value pairs, fast lookups by           | When you need to associate unique keys with values for quick lookup.
           |  unique keys.	                        |
=======================================================================================================================================

Summery 
==================
        => Arrays are best for scenarios where you need fast access by index and have a fixed number of elements. They are also good 
        for sorting operations.
        => Lists are best for scenarios where you need dynamic resizing, frequent insertions and deletions, and operations like 
        filtering and sorting.
        => Dictionaries are best for scenarios where you need fast lookups by key and want to associate unique keys with values.








































