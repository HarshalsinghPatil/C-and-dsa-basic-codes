Some basic understanding of c# concepts
-------------------------------------------
- Datatypes 
    - f - for float eg. myFloat = 1.2345f (range 10^-45)
    - for double eg. No need to write any suffix (range 10 ^ -340)
    - m - for decimal eg. myDecimal = 1.2345m(range 10^-28)

- we use for loop when we know there are fix number of iterations. 
- In case of exception...... try-catch-finally
	- if we catch exception then finally will get executed
	- if we hadle specific exception and we got the different exception at the
     runtime then our code will be existed and finally will not be executed
	 e.g. 
	 we used catch block to handle the arithmatic exception but at runtime 
	 runtime we got null exception then our program will be terminated without
	 executing finally block.

-- In same class if we have to call the function then we can do it in two ways 
	1. static method 
	2. Create an object and then call the this method without declaring it static

# function
---------------
using System;

public class Program
{
    void Show() //Non-parameterised function
    {
        Console.WriteLine("This is the Non-parameterised function");
    }
    
    void Show2(string msg) //Parameterised function
    {
        Console.WriteLine("Hello "+ msg);
    }
    
    string Show3(string msg) //Parameterised function with the return type 
    {
       Console.WriteLine("Mgs inside Show3 function: " + msg);
       return msg;
    }

    void Show4(int val)
    {
	val *= val; // Manipulating value  
        Console.WriteLine("Value inside the show4 function "+val);  
    }

 
    public void Show5(ref int val)  
    {  
             val *= val; // Manipulating value  
            Console.WriteLine("Value inside the show5 function "+val);  
           
    }

    Kim : Static keyword - in same class we are calling show6 function 
    without object.
    public static oid Show6(out int val) // Out parameter  
    {  
            int square = 5;  
            val = square;  
            val *= val; // Manipulating value  
    } 

    // To return multiple values
         public static  void Show(out int a, out int b) 
        {  
            int square = 5;  
            a = square;  
            b = square;  
            // Manipulating value  
            a *= a;   
            b *= b;  
        }  
    
    public static void Main(string[] args) 
    {
         Program pg = new Program();
         
         pg.Show();
         pg.Show2("Harshal");
         string msg = pg.Show3("Harshal lets check");
         Console.WriteLine("Hi " + msg);

	//Lets check what is pass by value and pass by reference

	    int val = 50;  
	    // 1. Pass by value 
            Program program = new Program(); // Creating Object 
	    Console.WriteLine("Value before calling the show4 "+val);  
            program.Show4(val); // Calling Function by passing value            
            Console.WriteLine("Value after calling the show4 " + val); //value doesn't change 
 
	    // 2. Pass by reference

            Console.WriteLine("Value before calling the show5 "+val);  
            program.Show5(ref val); // Calling Function by passing reference            
            Console.WriteLine("Value after calling the show5 " + val);// value changes  

	    
	    /* 3."out" Parameter : 
            -------------------
	     - reference-type, not require to initialize variable before passing
	     - We must use out keyword to pass argument as out-type
	     - It is useful when we want a function to return multiple values.
         */

            Console.WriteLine("Value before passing out variable " + val);  
            Show6(out val); // Passing out argument  
            Console.WriteLine("Value after recieving the out variable " + val); 

            // To function has to return multiple values
             int val2 = 50, val3 = 100;  
             
            Console.WriteLine("Value before passing \n val1 = " + val2+" \n val2 = "+val3);  
            Show7(out val1, out val2); // Passing out argument  
            Console.WriteLine("Value after passing \n val1 = " + val2 + " \n val2 = " + val3);   
	    
    }
}

==============================================================================================================


C# Arrays
-------------
- Like other programming languages, array in C# is a group of similar types of elements 
that have contiguous memory location. We can store only fixed set of elements in C# array. 
- In C#, array is an object of base type System.Array. 
- In C#, array index starts from 0.

C# Array Types
There are 3 types of arrays in C# programming:

1. Single Dimensional Array
2. Multidimensional Array
3. Jagged Array

1. C# Single Dimensional Array : 
--------------------------------
put square bracket after datatype like below :

int[] arr = new int[5];//creating array with specifiying size at creation

// Creating and initializing an array of integers
int[] numbers = { 1, 2, 3, 4, 5 };

// Another way to initialize without specifying size
int[] otherNumbers = new int[] { 6, 7, 8, 9, 10 };


class Program {
    public static void Main(string[] args)
    {
        int[] arr = new int[5];//here we have specified size of array
        
        //How to assign the values to the array index
        arr[0] = 10; 
        arr[1] = 20; 
        arr[3] = 40; 
        arr[4] = 50;
        int count = 0;

	//If you place it inside of foreach loop then count will be resetted to zero everytime
        foreach(int val in arr)
        {   
            Console.WriteLine("The value at Index " + count + " is "+ val);
            ++count;
        }
    }
}


using System;

public class Program
{
    
    //here you can't call method in same class without using static keyword
    static void printArray(int[] arr)
    {
        
        Console.WriteLine("Elements in this array are : ");
        for(int i= 0 ; i<arr.Length; i++)
        {
            Console.WriteLine(arr[i]);
        }
    }
    //Kim : here arr.Length is property and not method don't use the round bracket here
    static void maxValueInArray(int[] arr)
    {
        int max = arr[0];
        
        for(int i = 0; i< arr.Length; i++)
        {
            if(max<arr[i])
            {
                max = arr[i];
            }
        }
        
        Console.WriteLine("The max number here is :" + max);
    }
    
    static void minValueInArray(int[] arr)
    {
        int min = arr[0];
        
        for( int i = 0 ; i< arr.Length ; i++)
        {
            if(min> arr[i])
            {
                min = arr[i];
            }
        }
        
        Console.WriteLine("The min number here is :" + min);
        
    }
    
    public static void Main(string[] args)
    {
        int[] arr1 = {25, 10, 20, 15, 40, 50};
        int[] arr2 = {12, 23, 44, 11, 54 };
        
        printArray(arr1);
        printArray(arr2);
        
        minValueInArray(arr1);
	minValueInArray(arr2);

	maxValueInArray(arr1);
	maxValueInArray(arr2);
        
    }
}


# Multi-dimensional Array :
------------------------------
To create multidimensional array, we need to use comma inside the square brackets like below 

int[,] arr=new int[3,3];//declaration of 2D array  
int[,,] arr=new int[3,3,3];//declaration of 3D array 

2D Array:
----------

class Program {
	public static void Main(string [] args)
	{
		int[,] arr = new int[3,3];
		
		arr[0,1] = 10;
		arr[1,2] = 20;
		arr[2,0] = 30;

		for(int i = 0 ; i<3 ; i++)
		{
			for(int j= 0; j<3 ; j++)
			{
				Console.Write(arr[i,j]+ "\t" );
			}
			Console.WriteLine( );
		}
	}
}

3D Array:
----------
using System;

public class Program
{
    public static void Main()
    {
        // Define and initialize a 3D array
        int[,,] arr = new int[2, 3, 4]
        {
            {
                { 1, 2, 3, 4 },
                { 5, 6, 7, 8 },
                { 9, 10, 11, 12 }
            },
            {
                { 13, 14, 15, 16 },
                { 17, 18, 19, 20 },
                { 21, 22, 23, 24 }
            }
        };

        // Iterate over the 3D array and print its elements
        for (int i = 0; i < arr.GetLength(0); i++) //first dimension (depth)
        {
            Console.WriteLine($"Layer {i}:");
            for (int j = 0; j < arr.GetLength(1); j++) // second dimension (rows)
            {
                for (int k = 0; k < arr.GetLength(2); k++) 
                {
                    Console.Write(arr[i, j, k] + "\t"); 
                }
                Console.WriteLine(); // Move to the next line after each row
            }
            Console.WriteLine(); 
        }
    }
}



C# Jagged Arrays
-------------------

In C#, jagged array is also known as "array of arrays" because its elements are arrays. The element size of jagged array can be different.

Declaration of Jagged array :-
---------------------------
Let's see an example to declare jagged array that has two elements.
int[][] arr = new int[2][]; 

 
Initialization of Jagged array
----------------------------------
Let's see an example to initialize jagged array. The size of elements can be different.
arr[0] = new int[4];  
arr[1] = new int[6];  

Initialization and filling elements in Jagged array
---------------------------------------------------------
Let's see an example to initialize and fill elements in jagged array
arr[0] = new int[4] { 11, 21, 56, 78 };         
arr[1] = new int[6] { 42, 61, 37, 41, 59, 63 };  

Here, size of elements in jagged array is optional. So, you can write above code as given below:
arr[0] = new int[] { 11, 21, 56, 78 };         
arr[1] = new int[] { 42, 61, 37, 41, 59, 63 };  


public class HelloWorld
{
    public static void Main(string[] args)
    {
        int[][] arr = new int[2][];
        arr[0] = new int[] {1,2,3,4,5,6};
        arr[1] =  new int[] {7,5,9,8,1,4};
        
        for(int i = 0; i<arr.Length; i++) 
        {
            for(int j = 0; j< arr[i].Length; j++)
            {
                Console.Write(arr[i][j] + "\t");
            }
            Console.WriteLine();
        }
    }
}



        C# Array class Signature:
        ----------------------------

        [SerializableAttribute]  
        [ComVisibleAttribute(true)]  
        public abstract class Array : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable   
          

        Property: Length , IsFixedSize, Rank

        Methods: 
        1. Copy(Array,Array,Int32)
        2. IndexOf(Array,Object)
        3. Reverse(Array)
        4. Sort(Array)
        5. ToString()

    #  Params
    ------------
    - used to specify a parameter that takes variable number of arguments
    - useful when we don't know the number of arguments prior
    - one params keyword is allowed & no additional parameter is permitted after
     params keyword in a function declaration

    class Program {
    
            public static void PassMultipleValues (params object[] items)
            {
                for (int i = 0; i < items.Length; i++)  
                {  
                    Console.WriteLine(items[i]);  
                } 
            }
            
            public static void Main(String [] args)
            {
                PassMultipleValues("harshal", 100, "Ramakrishnan Ayyer","Ramesh",101, 20.50,"Peter", 'A');
                
            }
    }


====================================================================================================
                        Object oriented programming
====================================================================================================
- Note you can't declare class in a namespace private 

- Basic example of a class 

public class Employee {
    public int Id ;
    public string Name ;
    public double salary;
    
    public void Insert (int i , string n, double s)
    {
        Id = i;
        Name = n;
        salary = s;
    }
    
    public void Display()
    {
        Console.WriteLine(Id+" "+Name+
        ""+salary);
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e1 = new Employee();
       Employee e2 = new Employee();
    
        e1.Insert(1, "name 1", 10000.23);// call methods using objects
        e2.Insert(2, "name 2", 10000.65);
        
        e1.Display();
        e2.Display();
    }
}

--------constructor(parameterised and non-parameterised) ----------

public class Employee {
    public int Id ;
    public string Name ;
    public double salary;

    public Employee()
    {
        Console.WriteLine("Default constructor invoked ");
    }
    
    //Constructor do not require a return type
    public Employee (int i , string n, double s); //Parameterised
    {
        Id = i;
        Name = n;
        salary = s;
    }

    Note : here if parameter names and class properties have same name 
    then we use "this" keyword.

    ~Employee()
    {  
            Console.WriteLine("Destructor Invoked");  
    } 
    
    public void Display()
    {
        Console.WriteLine(Id+" "+Name+
        ""+salary);
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e0 = new Employee();
       Employee e1 = new Employee(1, "name 1", 10000.23);
       Employee e2 = new Employee(2, "name 2", 10000.65);
        
        e1.Display();
        e2.Display();
    }
}

# Static Constructor: 
----------------------
- while creating object/instance Static constructor called only once 
and that is when the class is load for the first time.
- It is used to initialize the static fields of the class.
- No matter how many objects of class are created but static contructor
called only once.

using System;
public class Employee {
    public int Id ;
    public string Name ;
    public double salary;

    static Employee()//kim : we can't apply "public" to static modifier
    {
        Console.WriteLine("Static constructor invoked ");
    } 

    public Employee()
    {
        Console.WriteLine("Default constructor invoked ");
    }
    
    
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
       Employee e0 = new Employee();
       Employee e1 = new Employee();
       Employee e2 = new Employee();
    }
}



Sept#2024



Q. why destructors are not needed in c# ?
=> destructors are not required in C#. The .NET garbage collector effectively
 manages memory, and the IDisposable interface provides a more controlled way
  to release unmanaged resources when necessary. Destructors should be used 
  sparingly and only when working with unmanaged resources that need to be 
  released explicitly.


Boxing and unboxing
----------------------
⚫ Boxing : Value type is converted to object type

 	object obj;
 	obj = 100; // this is boxing

⚫ Unboxing : Object type is converted to a value type

	int i = 123;
	object obj = i; //boxing
	int j = (int)obj; //unboxing


Types of Method Parameters 
------------------------------
- optional parameters : we give default values if user don't provide anything e.g. body temp = 37.
- Named and positional parameters : if we keep field(i.e. variable) name same then we don't need
to keep the sequence of arguments and parameters same . 
- params


STATIC 
-----------
1. Static field : 
- instance field which gets memory each time whenever you create object But if we are using 
same varible field at 100 places then its better to make it static so that it's copy get 
shared among all
-there is only one copy of static field created in the memory. It is shared to all the objects.
e.g. we can have multiple Accounts but it should have same rateOfInterest.Then we will declare 
it static.

using System;  
   public class Account  
    {  
        public int accno;   
        public String name;  
        public static float rateOfInterest=8.8f;  
        public Account(int accno, String name)  
        {  
            this.accno = accno;  
            this.name = name;  
        }  
          
        public void display()  
        {  
            Console.WriteLine(accno + " " + name + " " + rateOfInterest);  
        }  
   }  
   class TestAccount{  
       public static void Main(string[] args)  
        {  
            Account a1 = new Account(101, "Sonoo");  
            Account a2 = new Account(102, "Mahesh");  
            a1.display();  
            a2.display(); 

            Warning: But remember if you change value of static field then it will be changed 
            for all the fields 
              Account.rateOfInterest = 10.5f;//changing value   

            Account a3 = new Account(103, "Sonoo");  
            Account a4 = new Account(104, "Mahesh"); 
  
        }  
    } 


C# static class :
=================
Points to remember for C# static class
- C# static class contains only static members.
- C# static class cannot be instantiated.
- C# static class is sealed.
- C# static class cannot contain instance constructors.



Static Class in C#
A static class is a class that cannot be instantiated. It can only contain static members,
 which means all fields, methods, and properties of the class must also be static. Static
 classes are useful when you want to create utility classes that provide a collection of 
methods or constants without maintaining any state or instance data.

Rules for Static Classes
------------------------------
- No Instance Members: A static class cannot contain instance members like 
  non-static fields,properties, or methods.
- No Object Instantiation: You cannot create an object of a static class using the 
  new keyword.
- Static Constructor:
	- Static classes can have a static constructor. 
	- The static constructor is parameterless.
- Cannot have an access modifier (e.g., public, private).
- Is called automatically once, before any static member is accessed or any static method is called.   
- Static Fields: All fields in a static class must be static.
- Static Methods and Properties: All methods and properties in a static class mustbe static.   
- Inheritance: A static class cannot inherit from other classes, nor can it be inherited by any other class
    

public static class MathUtility
{
    // Static field
    private static int calculationCount = 0;

    // Static constructor
    static MathUtility()
    {
        Console.WriteLine("Static constructor of MathUtility invoked.");
    }

    // Static property
    public static int CalculationCount
    {
        get { return calculationCount; }
    }

    // Static method
    public static double Add(double a, double b)
    {
        calculationCount++;
        return a + b;
    }

    // Another static method
    public static double Multiply(double a, double b)
    {
        calculationCount++;
        return a * b;
    }
}

public class HelloWorld
{
    public static void Main(string[] args)
    {
        // Accessing static methods
        double sum = MathUtility.Add(3.5, 2.5); // Allowed
        double product = MathUtility.Multiply(4, 5); // Allowed

        // Accessing static property
        Console.WriteLine("Calculation count: " + MathUtility.CalculationCount); // Allowed
        
        // Cannot instantiate a static class
        // MathUtility mathUtility = new MathUtility(); // Not Allowed (Compile-time error)
    }
}

C# Properties
=================
	C# Properites doesn't have storage location. C# Properites are extension of fields 
and accessed like fields.

The Properties have accessors that are used to set, get or compute their values.

Usage of C# Properties
-----------------------
	- C# Properties can be read-only or write-only.
	- We can have logic while setting values in the C# Properties.
	- We make fields of the class private, so that fields can't be accessed from outside 
the class directly.
	- Now we are forced to use C# properties for setting or getting values.


using System;  
   public class Employee  
    {  
        private string name;  
  
        public string Name  
        {  
            get  
            {  
                return name;  
            }  
            set  
            {  
                name = value;  
            }  
        }  
   }  
   class TestEmployee{  
       public static void Main(string[] args)  
        {  
            Employee e1 = new Employee();  
            e1.Name = "Sonoo Jaiswal";  
            Console.WriteLine("Employee Name: " + e1.Name);  
        }  
    }  


======================================================================================================

using System;  
   public class Animal  
    {  
       public void eat() { Console.WriteLine("Eating..."); }  
   }  
   public class Dog: Animal  
   {  
       public void bark() { Console.WriteLine("Barking..."); }  
   }  
   class TestInheritance2{  
       public static void Main(string[] args)  
        {  
            Dog d1 = new Dog();  
            d1.eat();  
            d1.bark();  
        }  
    }  






